/* tslint:disable */
/* eslint-disable */
/**
 * Social Service
 * Solomon AI Social Service
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PermissionType } from './PermissionType';
import {
    PermissionTypeFromJSON,
    PermissionTypeFromJSONTyped,
    PermissionTypeToJSON,
} from './PermissionType';

/**
 * 
 * @export
 * @interface CreateTeamBody
 */
export interface CreateTeamBody {
    /**
     * The name of the team. This field is required and should be unique.
     * @type {string}
     * @memberof CreateTeamBody
     */
    teamName: string;
    /**
     * A brief description of the team, outlining its purpose and goals. This field is required.
     * @type {string}
     * @memberof CreateTeamBody
     */
    description: string;
    /**
     * A list of tags associated with the team, helping in categorization or searching. 
     * At least three tags are required.
     * @type {Array<string>}
     * @memberof CreateTeamBody
     */
    tags: Array<string>;
    /**
     * 
     * @type {PermissionType}
     * @memberof CreateTeamBody
     */
    adminPermissionType: PermissionType;
}

/**
 * Check if a given object implements the CreateTeamBody interface.
 */
export function instanceOfCreateTeamBody(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "teamName" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "tags" in value;
    isInstance = isInstance && "adminPermissionType" in value;

    return isInstance;
}

export function CreateTeamBodyFromJSON(json: any): CreateTeamBody {
    return CreateTeamBodyFromJSONTyped(json, false);
}

export function CreateTeamBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateTeamBody {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'teamName': json['teamName'],
        'description': json['description'],
        'tags': json['tags'],
        'adminPermissionType': PermissionTypeFromJSON(json['adminPermissionType']),
    };
}

export function CreateTeamBodyToJSON(value?: CreateTeamBody | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'teamName': value.teamName,
        'description': value.description,
        'tags': value.tags,
        'adminPermissionType': PermissionTypeToJSON(value.adminPermissionType),
    };
}

