/* tslint:disable */
/* eslint-disable */
/**
 * Social Service
 * Solomon AI Social Service
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditLog } from './AuditLog';
import {
    AuditLogFromJSON,
    AuditLogFromJSONTyped,
    AuditLogToJSON,
} from './AuditLog';
import type { Publication } from './Publication';
import {
    PublicationFromJSON,
    PublicationFromJSONTyped,
    PublicationToJSON,
} from './Publication';
import type { Role } from './Role';
import {
    RoleFromJSON,
    RoleFromJSONTyped,
    RoleToJSON,
} from './Role';
import type { UserProfile } from './UserProfile';
import {
    UserProfileFromJSON,
    UserProfileFromJSONTyped,
    UserProfileToJSON,
} from './UserProfile';

/**
 * 
 * @export
 * @interface TeamProfile
 */
export interface TeamProfile {
    /**
     * 
     * @type {string}
     * @memberof TeamProfile
     */
    id?: string;
    /**
     * 
     * @type {Array<Publication>}
     * @memberof TeamProfile
     */
    publications?: Array<Publication>;
    /**
     * 
     * @type {UserProfile}
     * @memberof TeamProfile
     */
    admin?: UserProfile;
    /**
     * 
     * @type {Array<string>}
     * @memberof TeamProfile
     */
    tags?: Array<string>;
    /**
     * 
     * @type {Array<UserProfile>}
     * @memberof TeamProfile
     */
    members?: Array<UserProfile>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TeamProfile
     */
    focusAreas?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof TeamProfile
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamProfile
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamProfile
     */
    teamName?: string;
    /**
     * 
     * @type {Array<Role>}
     * @memberof TeamProfile
     */
    roles?: Array<Role>;
    /**
     * 
     * @type {Array<AuditLog>}
     * @memberof TeamProfile
     */
    auditLogs?: Array<AuditLog>;
}

/**
 * Check if a given object implements the TeamProfile interface.
 */
export function instanceOfTeamProfile(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TeamProfileFromJSON(json: any): TeamProfile {
    return TeamProfileFromJSONTyped(json, false);
}

export function TeamProfileFromJSONTyped(json: any, ignoreDiscriminator: boolean): TeamProfile {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'publications': !exists(json, 'publications') ? undefined : ((json['publications'] as Array<any>).map(PublicationFromJSON)),
        'admin': !exists(json, 'admin') ? undefined : UserProfileFromJSON(json['admin']),
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'members': !exists(json, 'members') ? undefined : ((json['members'] as Array<any>).map(UserProfileFromJSON)),
        'focusAreas': !exists(json, 'focusAreas') ? undefined : json['focusAreas'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
        'teamName': !exists(json, 'teamName') ? undefined : json['teamName'],
        'roles': !exists(json, 'roles') ? undefined : ((json['roles'] as Array<any>).map(RoleFromJSON)),
        'auditLogs': !exists(json, 'auditLogs') ? undefined : ((json['auditLogs'] as Array<any>).map(AuditLogFromJSON)),
    };
}

export function TeamProfileToJSON(value?: TeamProfile | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'publications': value.publications === undefined ? undefined : ((value.publications as Array<any>).map(PublicationToJSON)),
        'admin': UserProfileToJSON(value.admin),
        'tags': value.tags,
        'members': value.members === undefined ? undefined : ((value.members as Array<any>).map(UserProfileToJSON)),
        'focusAreas': value.focusAreas,
        'description': value.description,
        'createdAt': value.createdAt,
        'teamName': value.teamName,
        'roles': value.roles === undefined ? undefined : ((value.roles as Array<any>).map(RoleToJSON)),
        'auditLogs': value.auditLogs === undefined ? undefined : ((value.auditLogs as Array<any>).map(AuditLogToJSON)),
    };
}

