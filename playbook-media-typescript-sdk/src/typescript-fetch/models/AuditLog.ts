/* tslint:disable */
/* eslint-disable */
/**
 * Social Service
 * Solomon AI Social Service
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActionType } from './ActionType';
import {
    ActionTypeFromJSON,
    ActionTypeFromJSONTyped,
    ActionTypeToJSON,
} from './ActionType';
import type { Outcome } from './Outcome';
import {
    OutcomeFromJSON,
    OutcomeFromJSONTyped,
    OutcomeToJSON,
} from './Outcome';

/**
 * 
 * @export
 * @interface AuditLog
 */
export interface AuditLog {
    /**
     * 
     * @type {string}
     * @memberof AuditLog
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditLog
     */
    action?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditLog
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditLog
     */
    timestamp?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditLog
     */
    description?: string;
    /**
     * 
     * @type {ActionType}
     * @memberof AuditLog
     */
    actionType?: ActionType;
    /**
     * logs the IP address from where the action was initiated, which is useful for security and auditing purposes.
     * @type {string}
     * @memberof AuditLog
     */
    ipAddress?: string;
    /**
     * 
     * @type {Outcome}
     * @memberof AuditLog
     */
    outcome?: Outcome;
    /**
     * give specific information about the entity that was affected by the action, making it easier to trace and understand the impact of each logged activity.
     * @type {string}
     * @memberof AuditLog
     */
    affectedEntityType?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditLog
     */
    affectedEntityId?: string;
}

/**
 * Check if a given object implements the AuditLog interface.
 */
export function instanceOfAuditLog(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AuditLogFromJSON(json: any): AuditLog {
    return AuditLogFromJSONTyped(json, false);
}

export function AuditLogFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuditLog {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'action': !exists(json, 'action') ? undefined : json['action'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'timestamp': !exists(json, 'timestamp') ? undefined : json['timestamp'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'actionType': !exists(json, 'actionType') ? undefined : ActionTypeFromJSON(json['actionType']),
        'ipAddress': !exists(json, 'ipAddress') ? undefined : json['ipAddress'],
        'outcome': !exists(json, 'outcome') ? undefined : OutcomeFromJSON(json['outcome']),
        'affectedEntityType': !exists(json, 'affectedEntityType') ? undefined : json['affectedEntityType'],
        'affectedEntityId': !exists(json, 'affectedEntityId') ? undefined : json['affectedEntityId'],
    };
}

export function AuditLogToJSON(value?: AuditLog | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'action': value.action,
        'userId': value.userId,
        'timestamp': value.timestamp,
        'description': value.description,
        'actionType': ActionTypeToJSON(value.actionType),
        'ipAddress': value.ipAddress,
        'outcome': OutcomeToJSON(value.outcome),
        'affectedEntityType': value.affectedEntityType,
        'affectedEntityId': value.affectedEntityId,
    };
}

