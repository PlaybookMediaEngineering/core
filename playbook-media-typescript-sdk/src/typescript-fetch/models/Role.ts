/* tslint:disable */
/* eslint-disable */
/**
 * Social Service
 * Solomon AI Social Service
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PermissionType } from './PermissionType';
import {
    PermissionTypeFromJSON,
    PermissionTypeFromJSONTyped,
    PermissionTypeToJSON,
} from './PermissionType';
import type { UserProfile } from './UserProfile';
import {
    UserProfileFromJSON,
    UserProfileFromJSONTyped,
    UserProfileToJSON,
} from './UserProfile';

/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    description?: string;
    /**
     * 
     * @type {Array<PermissionType>}
     * @memberof Role
     */
    permissions?: Array<PermissionType>;
    /**
     * 
     * @type {UserProfile}
     * @memberof Role
     */
    member?: UserProfile;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    updatedAt?: string;
}

/**
 * Check if a given object implements the Role interface.
 */
export function instanceOfRole(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoleFromJSON(json: any): Role {
    return RoleFromJSONTyped(json, false);
}

export function RoleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Role {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'permissions': !exists(json, 'permissions') ? undefined : ((json['permissions'] as Array<any>).map(PermissionTypeFromJSON)),
        'member': !exists(json, 'member') ? undefined : UserProfileFromJSON(json['member']),
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : json['updatedAt'],
    };
}

export function RoleToJSON(value?: Role | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'permissions': value.permissions === undefined ? undefined : ((value.permissions as Array<any>).map(PermissionTypeToJSON)),
        'member': UserProfileToJSON(value.member),
        'createdAt': value.createdAt,
        'updatedAt': value.updatedAt,
    };
}

