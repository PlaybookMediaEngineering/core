/* tslint:disable */
/* eslint-disable */
/**
 * Social Service
 * Solomon AI Social Service
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateUserProfileRequest,
  CreateUserProfileResponse,
  DeleteUserProfileResponse,
  DiscoverProfilesResponse,
  GetUserProfileResponse,
  GetUserProfilesResponse,
  InternalErrorMessageResponse,
  PathUnknownErrorMessageResponse,
  Status,
  ValidationErrorMessageResponse,
} from '../models/index';
import {
    CreateUserProfileRequestFromJSON,
    CreateUserProfileRequestToJSON,
    CreateUserProfileResponseFromJSON,
    CreateUserProfileResponseToJSON,
    DeleteUserProfileResponseFromJSON,
    DeleteUserProfileResponseToJSON,
    DiscoverProfilesResponseFromJSON,
    DiscoverProfilesResponseToJSON,
    GetUserProfileResponseFromJSON,
    GetUserProfileResponseToJSON,
    GetUserProfilesResponseFromJSON,
    GetUserProfilesResponseToJSON,
    InternalErrorMessageResponseFromJSON,
    InternalErrorMessageResponseToJSON,
    PathUnknownErrorMessageResponseFromJSON,
    PathUnknownErrorMessageResponseToJSON,
    StatusFromJSON,
    StatusToJSON,
    ValidationErrorMessageResponseFromJSON,
    ValidationErrorMessageResponseToJSON,
} from '../models/index';

export interface CreateUserProfileOperationRequest {
    createUserProfileRequest: CreateUserProfileRequest;
}

export interface DeleteUserProfileRequest {
    userId: string;
}

export interface DiscoverProfilesRequest {
    userId: string;
    limit: string;
}

export interface GetUserProfileRequest {
    userId: string;
    requestorProfileId?: string;
    requestorProfileType?: GetUserProfileRequestorProfileTypeEnum;
}

export interface GetUserProfilesRequest {
    pageSize: number;
    pageNumber: number;
}

/**
 * 
 */
export class UserProfileApi extends runtime.BaseAPI {

    /**
     * This endpoint enables a client to create a user profile
     * creates a user profile
     */
    async createUserProfileRaw(requestParameters: CreateUserProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateUserProfileResponse>> {
        if (requestParameters.createUserProfileRequest === null || requestParameters.createUserProfileRequest === undefined) {
            throw new runtime.RequiredError('createUserProfileRequest','Required parameter requestParameters.createUserProfileRequest was null or undefined when calling createUserProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserProfileRequestToJSON(requestParameters.createUserProfileRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateUserProfileResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to create a user profile
     * creates a user profile
     */
    async createUserProfile(requestParameters: CreateUserProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateUserProfileResponse> {
        const response = await this.createUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to delete a user profile
     * deletes a user profile
     */
    async deleteUserProfileRaw(requestParameters: DeleteUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteUserProfileResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteUserProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteUserProfileResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to delete a user profile
     * deletes a user profile
     */
    async deleteUserProfile(requestParameters: DeleteUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteUserProfileResponse> {
        const response = await this.deleteUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to discover a set of profiles he/she does not follow
     * Discover Profiles
     */
    async discoverProfilesRaw(requestParameters: DiscoverProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscoverProfilesResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling discoverProfiles.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling discoverProfiles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/discover/limit/{limit}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"limit"}}`, encodeURIComponent(String(requestParameters.limit))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscoverProfilesResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to discover a set of profiles he/she does not follow
     * Discover Profiles
     */
    async discoverProfiles(requestParameters: DiscoverProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscoverProfilesResponse> {
        const response = await this.discoverProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint performs a query against the social service to obtain a user profile
     * gets a user profile
     */
    async getUserProfileRaw(requestParameters: GetUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserProfileResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUserProfile.');
        }

        const queryParameters: any = {};

        if (requestParameters.requestorProfileId !== undefined) {
            queryParameters['requestorProfileId'] = requestParameters.requestorProfileId;
        }

        if (requestParameters.requestorProfileType !== undefined) {
            queryParameters['requestorProfileType'] = requestParameters.requestorProfileType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserProfileResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint performs a query against the social service to obtain a user profile
     * gets a user profile
     */
    async getUserProfile(requestParameters: GetUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserProfileResponse> {
        const response = await this.getUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to get a number of user profiles in a paginated manner
     * Gets a set of user profiles
     */
    async getUserProfilesRaw(requestParameters: GetUserProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserProfilesResponse>> {
        if (requestParameters.pageSize === null || requestParameters.pageSize === undefined) {
            throw new runtime.RequiredError('pageSize','Required parameter requestParameters.pageSize was null or undefined when calling getUserProfiles.');
        }

        if (requestParameters.pageNumber === null || requestParameters.pageNumber === undefined) {
            throw new runtime.RequiredError('pageNumber','Required parameter requestParameters.pageNumber was null or undefined when calling getUserProfiles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/page-size/{pageSize}/page-number/{pageNumber}`.replace(`{${"pageSize"}}`, encodeURIComponent(String(requestParameters.pageSize))).replace(`{${"pageNumber"}}`, encodeURIComponent(String(requestParameters.pageNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserProfilesResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to get a number of user profiles in a paginated manner
     * Gets a set of user profiles
     */
    async getUserProfiles(requestParameters: GetUserProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserProfilesResponse> {
        const response = await this.getUserProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetUserProfileRequestorProfileTypeEnum = {
    Unspecified: 'ACCOUNT_TYPE_UNSPECIFIED',
    User: 'ACCOUNT_TYPE_USER',
    Community: 'ACCOUNT_TYPE_COMMUNITY'
} as const;
export type GetUserProfileRequestorProfileTypeEnum = typeof GetUserProfileRequestorProfileTypeEnum[keyof typeof GetUserProfileRequestorProfileTypeEnum];
