/* tslint:disable */
/* eslint-disable */
/**
 * Social Service
 * Solomon AI Social Service
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddTeamMemberBody,
  AddTeamMemberResponse,
  GetTeamMemberResponse,
  InternalErrorMessageResponse,
  PathUnknownErrorMessageResponse,
  RemoveTeamMemberResponse,
  Status,
  ValidationErrorMessageResponse,
} from '../models/index';
import {
    AddTeamMemberBodyFromJSON,
    AddTeamMemberBodyToJSON,
    AddTeamMemberResponseFromJSON,
    AddTeamMemberResponseToJSON,
    GetTeamMemberResponseFromJSON,
    GetTeamMemberResponseToJSON,
    InternalErrorMessageResponseFromJSON,
    InternalErrorMessageResponseToJSON,
    PathUnknownErrorMessageResponseFromJSON,
    PathUnknownErrorMessageResponseToJSON,
    RemoveTeamMemberResponseFromJSON,
    RemoveTeamMemberResponseToJSON,
    StatusFromJSON,
    StatusToJSON,
    ValidationErrorMessageResponseFromJSON,
    ValidationErrorMessageResponseToJSON,
} from '../models/index';

export interface AddTeamMemberRequest {
    teamId: string;
    addTeamMemberBody: AddTeamMemberBody;
}

export interface GetTeamMemberRequest {
    teamId: string;
    memberUserId: string;
}

export interface RemoveTeamMemberRequest {
    teamId: string;
    memberUserId: string;
    adminUserId: string;
}

/**
 * 
 */
export class TeamMemberApi extends runtime.BaseAPI {

    /**
     * This endpoint adds a new member to a team.
     * Add a new team member
     */
    async addTeamMemberRaw(requestParameters: AddTeamMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddTeamMemberResponse>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling addTeamMember.');
        }

        if (requestParameters.addTeamMemberBody === null || requestParameters.addTeamMemberBody === undefined) {
            throw new runtime.RequiredError('addTeamMemberBody','Required parameter requestParameters.addTeamMemberBody was null or undefined when calling addTeamMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/teams/{teamId}/members`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddTeamMemberBodyToJSON(requestParameters.addTeamMemberBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddTeamMemberResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint adds a new member to a team.
     * Add a new team member
     */
    async addTeamMember(requestParameters: AddTeamMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddTeamMemberResponse> {
        const response = await this.addTeamMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint fetches details of a specific team member.
     * Get details of a team member
     */
    async getTeamMemberRaw(requestParameters: GetTeamMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTeamMemberResponse>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling getTeamMember.');
        }

        if (requestParameters.memberUserId === null || requestParameters.memberUserId === undefined) {
            throw new runtime.RequiredError('memberUserId','Required parameter requestParameters.memberUserId was null or undefined when calling getTeamMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/teams/{teamId}/members/{memberUserId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))).replace(`{${"memberUserId"}}`, encodeURIComponent(String(requestParameters.memberUserId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTeamMemberResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint fetches details of a specific team member.
     * Get details of a team member
     */
    async getTeamMember(requestParameters: GetTeamMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTeamMemberResponse> {
        const response = await this.getTeamMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint removes a member from a team.
     * Remove a team member
     */
    async removeTeamMemberRaw(requestParameters: RemoveTeamMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RemoveTeamMemberResponse>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling removeTeamMember.');
        }

        if (requestParameters.memberUserId === null || requestParameters.memberUserId === undefined) {
            throw new runtime.RequiredError('memberUserId','Required parameter requestParameters.memberUserId was null or undefined when calling removeTeamMember.');
        }

        if (requestParameters.adminUserId === null || requestParameters.adminUserId === undefined) {
            throw new runtime.RequiredError('adminUserId','Required parameter requestParameters.adminUserId was null or undefined when calling removeTeamMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/teams/{teamId}/members/{memberUserId}/admin/{adminUserId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))).replace(`{${"memberUserId"}}`, encodeURIComponent(String(requestParameters.memberUserId))).replace(`{${"adminUserId"}}`, encodeURIComponent(String(requestParameters.adminUserId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RemoveTeamMemberResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint removes a member from a team.
     * Remove a team member
     */
    async removeTeamMember(requestParameters: RemoveTeamMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RemoveTeamMemberResponse> {
        const response = await this.removeTeamMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
