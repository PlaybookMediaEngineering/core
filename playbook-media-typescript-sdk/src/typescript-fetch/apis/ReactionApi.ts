/* tslint:disable */
/* eslint-disable */
/**
 * Social Service
 * Solomon AI Social Service
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InternalErrorMessageResponse,
  PathUnknownErrorMessageResponse,
  ReactToCommentReplyResponse,
  ReactToCommentResponse,
  ReactToPostResponse,
  Status,
  ValidationErrorMessageResponse,
} from '../models/index';
import {
    InternalErrorMessageResponseFromJSON,
    InternalErrorMessageResponseToJSON,
    PathUnknownErrorMessageResponseFromJSON,
    PathUnknownErrorMessageResponseToJSON,
    ReactToCommentReplyResponseFromJSON,
    ReactToCommentReplyResponseToJSON,
    ReactToCommentResponseFromJSON,
    ReactToCommentResponseToJSON,
    ReactToPostResponseFromJSON,
    ReactToPostResponseToJSON,
    StatusFromJSON,
    StatusToJSON,
    ValidationErrorMessageResponseFromJSON,
    ValidationErrorMessageResponseToJSON,
} from '../models/index';

export interface ReactToCommentRequest {
    userId: string;
    postId: string;
    commentId: string;
    accountType: ReactToCommentAccountTypeEnum;
    reaction: ReactToCommentReactionEnum;
    postType: ReactToCommentPostTypeEnum;
}

export interface ReactToCommentReplyRequest {
    userId: string;
    postId: string;
    commentId: string;
    replyId: string;
    accountType: ReactToCommentReplyAccountTypeEnum;
    reaction: ReactToCommentReplyReactionEnum;
    postType: ReactToCommentReplyPostTypeEnum;
}

export interface ReactToPostRequest {
    userId: string;
    postId: string;
    accountType: ReactToPostAccountTypeEnum;
    reaction: ReactToPostReactionEnum;
    postType: ReactToPostPostTypeEnum;
}

/**
 * 
 */
export class ReactionApi extends runtime.BaseAPI {

    /**
     * This endpoint enables a client to react to a comment
     * Reacts to a comment
     */
    async reactToCommentRaw(requestParameters: ReactToCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReactToCommentResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling reactToComment.');
        }

        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling reactToComment.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling reactToComment.');
        }

        if (requestParameters.accountType === null || requestParameters.accountType === undefined) {
            throw new runtime.RequiredError('accountType','Required parameter requestParameters.accountType was null or undefined when calling reactToComment.');
        }

        if (requestParameters.reaction === null || requestParameters.reaction === undefined) {
            throw new runtime.RequiredError('reaction','Required parameter requestParameters.reaction was null or undefined when calling reactToComment.');
        }

        if (requestParameters.postType === null || requestParameters.postType === undefined) {
            throw new runtime.RequiredError('postType','Required parameter requestParameters.postType was null or undefined when calling reactToComment.');
        }

        const queryParameters: any = {};

        if (requestParameters.postType !== undefined) {
            queryParameters['postType'] = requestParameters.postType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/post/{postId}/comment/{commentId}/account-type/{accountType}/reaction/{reaction}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))).replace(`{${"accountType"}}`, encodeURIComponent(String(requestParameters.accountType))).replace(`{${"reaction"}}`, encodeURIComponent(String(requestParameters.reaction))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReactToCommentResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to react to a comment
     * Reacts to a comment
     */
    async reactToComment(requestParameters: ReactToCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReactToCommentResponse> {
        const response = await this.reactToCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to react to a comment reply
     * Reacts to a comment reply
     */
    async reactToCommentReplyRaw(requestParameters: ReactToCommentReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReactToCommentReplyResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling reactToCommentReply.');
        }

        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling reactToCommentReply.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling reactToCommentReply.');
        }

        if (requestParameters.replyId === null || requestParameters.replyId === undefined) {
            throw new runtime.RequiredError('replyId','Required parameter requestParameters.replyId was null or undefined when calling reactToCommentReply.');
        }

        if (requestParameters.accountType === null || requestParameters.accountType === undefined) {
            throw new runtime.RequiredError('accountType','Required parameter requestParameters.accountType was null or undefined when calling reactToCommentReply.');
        }

        if (requestParameters.reaction === null || requestParameters.reaction === undefined) {
            throw new runtime.RequiredError('reaction','Required parameter requestParameters.reaction was null or undefined when calling reactToCommentReply.');
        }

        if (requestParameters.postType === null || requestParameters.postType === undefined) {
            throw new runtime.RequiredError('postType','Required parameter requestParameters.postType was null or undefined when calling reactToCommentReply.');
        }

        const queryParameters: any = {};

        if (requestParameters.postType !== undefined) {
            queryParameters['postType'] = requestParameters.postType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/post/{postId}/comment/{commentId}/reply/{replyId}/account-type/{accountType}/reaction/{reaction}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))).replace(`{${"replyId"}}`, encodeURIComponent(String(requestParameters.replyId))).replace(`{${"accountType"}}`, encodeURIComponent(String(requestParameters.accountType))).replace(`{${"reaction"}}`, encodeURIComponent(String(requestParameters.reaction))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReactToCommentReplyResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to react to a comment reply
     * Reacts to a comment reply
     */
    async reactToCommentReply(requestParameters: ReactToCommentReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReactToCommentReplyResponse> {
        const response = await this.reactToCommentReplyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to react to a post
     * Reacts to a post
     */
    async reactToPostRaw(requestParameters: ReactToPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReactToPostResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling reactToPost.');
        }

        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling reactToPost.');
        }

        if (requestParameters.accountType === null || requestParameters.accountType === undefined) {
            throw new runtime.RequiredError('accountType','Required parameter requestParameters.accountType was null or undefined when calling reactToPost.');
        }

        if (requestParameters.reaction === null || requestParameters.reaction === undefined) {
            throw new runtime.RequiredError('reaction','Required parameter requestParameters.reaction was null or undefined when calling reactToPost.');
        }

        if (requestParameters.postType === null || requestParameters.postType === undefined) {
            throw new runtime.RequiredError('postType','Required parameter requestParameters.postType was null or undefined when calling reactToPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.postType !== undefined) {
            queryParameters['postType'] = requestParameters.postType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/post/{postId}/account-type/{accountType}/reaction/{reaction}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))).replace(`{${"accountType"}}`, encodeURIComponent(String(requestParameters.accountType))).replace(`{${"reaction"}}`, encodeURIComponent(String(requestParameters.reaction))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReactToPostResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to react to a post
     * Reacts to a post
     */
    async reactToPost(requestParameters: ReactToPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReactToPostResponse> {
        const response = await this.reactToPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ReactToCommentAccountTypeEnum = {
    Unspecified: 'ACCOUNT_TYPE_UNSPECIFIED',
    User: 'ACCOUNT_TYPE_USER',
    Community: 'ACCOUNT_TYPE_COMMUNITY'
} as const;
export type ReactToCommentAccountTypeEnum = typeof ReactToCommentAccountTypeEnum[keyof typeof ReactToCommentAccountTypeEnum];
/**
 * @export
 */
export const ReactToCommentReactionEnum = {
    Unspecified: 'REACTION_UNSPECIFIED',
    Like: 'REACTION_LIKE',
    Love: 'REACTION_LOVE',
    Haha: 'REACTION_HAHA',
    Wow: 'REACTION_WOW',
    Sad: 'REACTION_SAD',
    Angry: 'REACTION_ANGRY',
    Dislike: 'REACTION_DISLIKE'
} as const;
export type ReactToCommentReactionEnum = typeof ReactToCommentReactionEnum[keyof typeof ReactToCommentReactionEnum];
/**
 * @export
 */
export const ReactToCommentPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type ReactToCommentPostTypeEnum = typeof ReactToCommentPostTypeEnum[keyof typeof ReactToCommentPostTypeEnum];
/**
 * @export
 */
export const ReactToCommentReplyAccountTypeEnum = {
    Unspecified: 'ACCOUNT_TYPE_UNSPECIFIED',
    User: 'ACCOUNT_TYPE_USER',
    Community: 'ACCOUNT_TYPE_COMMUNITY'
} as const;
export type ReactToCommentReplyAccountTypeEnum = typeof ReactToCommentReplyAccountTypeEnum[keyof typeof ReactToCommentReplyAccountTypeEnum];
/**
 * @export
 */
export const ReactToCommentReplyReactionEnum = {
    Unspecified: 'REACTION_UNSPECIFIED',
    Like: 'REACTION_LIKE',
    Love: 'REACTION_LOVE',
    Haha: 'REACTION_HAHA',
    Wow: 'REACTION_WOW',
    Sad: 'REACTION_SAD',
    Angry: 'REACTION_ANGRY',
    Dislike: 'REACTION_DISLIKE'
} as const;
export type ReactToCommentReplyReactionEnum = typeof ReactToCommentReplyReactionEnum[keyof typeof ReactToCommentReplyReactionEnum];
/**
 * @export
 */
export const ReactToCommentReplyPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type ReactToCommentReplyPostTypeEnum = typeof ReactToCommentReplyPostTypeEnum[keyof typeof ReactToCommentReplyPostTypeEnum];
/**
 * @export
 */
export const ReactToPostAccountTypeEnum = {
    Unspecified: 'ACCOUNT_TYPE_UNSPECIFIED',
    User: 'ACCOUNT_TYPE_USER',
    Community: 'ACCOUNT_TYPE_COMMUNITY'
} as const;
export type ReactToPostAccountTypeEnum = typeof ReactToPostAccountTypeEnum[keyof typeof ReactToPostAccountTypeEnum];
/**
 * @export
 */
export const ReactToPostReactionEnum = {
    Unspecified: 'REACTION_UNSPECIFIED',
    Like: 'REACTION_LIKE',
    Love: 'REACTION_LOVE',
    Haha: 'REACTION_HAHA',
    Wow: 'REACTION_WOW',
    Sad: 'REACTION_SAD',
    Angry: 'REACTION_ANGRY',
    Dislike: 'REACTION_DISLIKE'
} as const;
export type ReactToPostReactionEnum = typeof ReactToPostReactionEnum[keyof typeof ReactToPostReactionEnum];
/**
 * @export
 */
export const ReactToPostPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type ReactToPostPostTypeEnum = typeof ReactToPostPostTypeEnum[keyof typeof ReactToPostPostTypeEnum];
