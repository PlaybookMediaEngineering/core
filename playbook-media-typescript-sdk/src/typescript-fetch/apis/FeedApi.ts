/* tslint:disable */
/* eslint-disable */
/**
 * Social Service
 * Solomon AI Social Service
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetCommunityFeedResponse,
  GetUserFeedResponse,
  InternalErrorMessageResponse,
  PathUnknownErrorMessageResponse,
  SharePostResponse,
  Status,
  ValidationErrorMessageResponse,
} from '../models/index';
import {
    GetCommunityFeedResponseFromJSON,
    GetCommunityFeedResponseToJSON,
    GetUserFeedResponseFromJSON,
    GetUserFeedResponseToJSON,
    InternalErrorMessageResponseFromJSON,
    InternalErrorMessageResponseToJSON,
    PathUnknownErrorMessageResponseFromJSON,
    PathUnknownErrorMessageResponseToJSON,
    SharePostResponseFromJSON,
    SharePostResponseToJSON,
    StatusFromJSON,
    StatusToJSON,
    ValidationErrorMessageResponseFromJSON,
    ValidationErrorMessageResponseToJSON,
} from '../models/index';

export interface GetCommunityFeedRequest {
    communityProfileId: string;
    feedType: GetCommunityFeedFeedTypeEnum;
    accountType: GetCommunityFeedAccountTypeEnum;
    nextPageToken?: string;
}

export interface GetUserFeedRequest {
    userId: string;
    feedType: GetUserFeedFeedTypeEnum;
    accountType: GetUserFeedAccountTypeEnum;
    nextPageToken?: string;
}

export interface SharePostRequest {
    userId: string;
    parentPostId: string;
    parentPostType: SharePostParentPostTypeEnum;
    body: string;
}

/**
 * 
 */
export class FeedApi extends runtime.BaseAPI {

    /**
     * This endpoint enables a client query a community feed
     * Gets A Community Feed
     */
    async getCommunityFeedRaw(requestParameters: GetCommunityFeedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCommunityFeedResponse>> {
        if (requestParameters.communityProfileId === null || requestParameters.communityProfileId === undefined) {
            throw new runtime.RequiredError('communityProfileId','Required parameter requestParameters.communityProfileId was null or undefined when calling getCommunityFeed.');
        }

        if (requestParameters.feedType === null || requestParameters.feedType === undefined) {
            throw new runtime.RequiredError('feedType','Required parameter requestParameters.feedType was null or undefined when calling getCommunityFeed.');
        }

        if (requestParameters.accountType === null || requestParameters.accountType === undefined) {
            throw new runtime.RequiredError('accountType','Required parameter requestParameters.accountType was null or undefined when calling getCommunityFeed.');
        }

        const queryParameters: any = {};

        if (requestParameters.feedType !== undefined) {
            queryParameters['feedType'] = requestParameters.feedType;
        }

        if (requestParameters.accountType !== undefined) {
            queryParameters['accountType'] = requestParameters.accountType;
        }

        if (requestParameters.nextPageToken !== undefined) {
            queryParameters['nextPageToken'] = requestParameters.nextPageToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/community-profiles/{communityProfileId}/timeline`.replace(`{${"communityProfileId"}}`, encodeURIComponent(String(requestParameters.communityProfileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCommunityFeedResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client query a community feed
     * Gets A Community Feed
     */
    async getCommunityFeed(requestParameters: GetCommunityFeedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCommunityFeedResponse> {
        const response = await this.getCommunityFeedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client query a user feed
     * Gets A Userfeed
     */
    async getUserFeedRaw(requestParameters: GetUserFeedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserFeedResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUserFeed.');
        }

        if (requestParameters.feedType === null || requestParameters.feedType === undefined) {
            throw new runtime.RequiredError('feedType','Required parameter requestParameters.feedType was null or undefined when calling getUserFeed.');
        }

        if (requestParameters.accountType === null || requestParameters.accountType === undefined) {
            throw new runtime.RequiredError('accountType','Required parameter requestParameters.accountType was null or undefined when calling getUserFeed.');
        }

        const queryParameters: any = {};

        if (requestParameters.feedType !== undefined) {
            queryParameters['feedType'] = requestParameters.feedType;
        }

        if (requestParameters.accountType !== undefined) {
            queryParameters['accountType'] = requestParameters.accountType;
        }

        if (requestParameters.nextPageToken !== undefined) {
            queryParameters['nextPageToken'] = requestParameters.nextPageToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/timeline`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserFeedResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client query a user feed
     * Gets A Userfeed
     */
    async getUserFeed(requestParameters: GetUserFeedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserFeedResponse> {
        const response = await this.getUserFeedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to share a post
     * Share a post
     */
    async sharePostRaw(requestParameters: SharePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SharePostResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling sharePost.');
        }

        if (requestParameters.parentPostId === null || requestParameters.parentPostId === undefined) {
            throw new runtime.RequiredError('parentPostId','Required parameter requestParameters.parentPostId was null or undefined when calling sharePost.');
        }

        if (requestParameters.parentPostType === null || requestParameters.parentPostType === undefined) {
            throw new runtime.RequiredError('parentPostType','Required parameter requestParameters.parentPostType was null or undefined when calling sharePost.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling sharePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/post/share/{parentPostId}/type/{parentPostType}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"parentPostId"}}`, encodeURIComponent(String(requestParameters.parentPostId))).replace(`{${"parentPostType"}}`, encodeURIComponent(String(requestParameters.parentPostType))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SharePostResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to share a post
     * Share a post
     */
    async sharePost(requestParameters: SharePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SharePostResponse> {
        const response = await this.sharePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetCommunityFeedFeedTypeEnum = {
    Unspecified: 'FEED_TYPE_UNSPECIFIED',
    Personal: 'FEED_TYPE_PERSONAL',
    News: 'FEED_TYPE_NEWS',
    Notification: 'FEED_TYPE_NOTIFICATION'
} as const;
export type GetCommunityFeedFeedTypeEnum = typeof GetCommunityFeedFeedTypeEnum[keyof typeof GetCommunityFeedFeedTypeEnum];
/**
 * @export
 */
export const GetCommunityFeedAccountTypeEnum = {
    Unspecified: 'ACCOUNT_TYPE_UNSPECIFIED',
    User: 'ACCOUNT_TYPE_USER',
    Community: 'ACCOUNT_TYPE_COMMUNITY'
} as const;
export type GetCommunityFeedAccountTypeEnum = typeof GetCommunityFeedAccountTypeEnum[keyof typeof GetCommunityFeedAccountTypeEnum];
/**
 * @export
 */
export const GetUserFeedFeedTypeEnum = {
    Unspecified: 'FEED_TYPE_UNSPECIFIED',
    Personal: 'FEED_TYPE_PERSONAL',
    News: 'FEED_TYPE_NEWS',
    Notification: 'FEED_TYPE_NOTIFICATION'
} as const;
export type GetUserFeedFeedTypeEnum = typeof GetUserFeedFeedTypeEnum[keyof typeof GetUserFeedFeedTypeEnum];
/**
 * @export
 */
export const GetUserFeedAccountTypeEnum = {
    Unspecified: 'ACCOUNT_TYPE_UNSPECIFIED',
    User: 'ACCOUNT_TYPE_USER',
    Community: 'ACCOUNT_TYPE_COMMUNITY'
} as const;
export type GetUserFeedAccountTypeEnum = typeof GetUserFeedAccountTypeEnum[keyof typeof GetUserFeedAccountTypeEnum];
/**
 * @export
 */
export const SharePostParentPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type SharePostParentPostTypeEnum = typeof SharePostParentPostTypeEnum[keyof typeof SharePostParentPostTypeEnum];
