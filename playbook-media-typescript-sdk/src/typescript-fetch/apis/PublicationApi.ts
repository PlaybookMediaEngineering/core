/* tslint:disable */
/* eslint-disable */
/**
 * Social Service
 * Solomon AI Social Service
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddPostToPublicationResponse,
  AddPublicationEditorResponse,
  CreatePublicationResponse,
  DeletePostFromPublicationResponse,
  DeletePublicationEditorResponse,
  DeletePublicationResponse,
  GetPublicationResponse,
  InternalErrorMessageResponse,
  PathUnknownErrorMessageResponse,
  Post,
  Publication,
  Status,
  ValidationErrorMessageResponse,
} from '../models/index';
import {
    AddPostToPublicationResponseFromJSON,
    AddPostToPublicationResponseToJSON,
    AddPublicationEditorResponseFromJSON,
    AddPublicationEditorResponseToJSON,
    CreatePublicationResponseFromJSON,
    CreatePublicationResponseToJSON,
    DeletePostFromPublicationResponseFromJSON,
    DeletePostFromPublicationResponseToJSON,
    DeletePublicationEditorResponseFromJSON,
    DeletePublicationEditorResponseToJSON,
    DeletePublicationResponseFromJSON,
    DeletePublicationResponseToJSON,
    GetPublicationResponseFromJSON,
    GetPublicationResponseToJSON,
    InternalErrorMessageResponseFromJSON,
    InternalErrorMessageResponseToJSON,
    PathUnknownErrorMessageResponseFromJSON,
    PathUnknownErrorMessageResponseToJSON,
    PostFromJSON,
    PostToJSON,
    PublicationFromJSON,
    PublicationToJSON,
    StatusFromJSON,
    StatusToJSON,
    ValidationErrorMessageResponseFromJSON,
    ValidationErrorMessageResponseToJSON,
} from '../models/index';

export interface AddPostToPublicationRequest {
    editorUserId: string;
    publicationId: string;
    post: Post;
}

export interface AddPublicationEditorRequest {
    adminUserId: string;
    publicationId: string;
    editorUserId: string;
}

export interface CreatePublicationRequest {
    userId: string;
    publication: Publication;
}

export interface DeletePostFromPublicationRequest {
    editorUserId: string;
    publicationId: string;
    postId: string;
    postType: DeletePostFromPublicationPostTypeEnum;
}

export interface DeletePublicationRequest {
    adminUserId: string;
    publicationId: string;
}

export interface DeletePublicationEditorRequest {
    adminUserId: string;
    publicationId: string;
    editorUserId: string;
}

export interface GetPublicationRequest {
    userId: string;
    publicationId: string;
}

/**
 * 
 */
export class PublicationApi extends runtime.BaseAPI {

    /**
     * This endpoint enables a client to add a post to a publication
     * Add a post to a publication
     */
    async addPostToPublicationRaw(requestParameters: AddPostToPublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddPostToPublicationResponse>> {
        if (requestParameters.editorUserId === null || requestParameters.editorUserId === undefined) {
            throw new runtime.RequiredError('editorUserId','Required parameter requestParameters.editorUserId was null or undefined when calling addPostToPublication.');
        }

        if (requestParameters.publicationId === null || requestParameters.publicationId === undefined) {
            throw new runtime.RequiredError('publicationId','Required parameter requestParameters.publicationId was null or undefined when calling addPostToPublication.');
        }

        if (requestParameters.post === null || requestParameters.post === undefined) {
            throw new runtime.RequiredError('post','Required parameter requestParameters.post was null or undefined when calling addPostToPublication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/editor/{editorUserId}/publication/{publicationId}`.replace(`{${"editorUserId"}}`, encodeURIComponent(String(requestParameters.editorUserId))).replace(`{${"publicationId"}}`, encodeURIComponent(String(requestParameters.publicationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostToJSON(requestParameters.post),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddPostToPublicationResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to add a post to a publication
     * Add a post to a publication
     */
    async addPostToPublication(requestParameters: AddPostToPublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddPostToPublicationResponse> {
        const response = await this.addPostToPublicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to add an editor to a publication
     * Adds an editor to a publication
     */
    async addPublicationEditorRaw(requestParameters: AddPublicationEditorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddPublicationEditorResponse>> {
        if (requestParameters.adminUserId === null || requestParameters.adminUserId === undefined) {
            throw new runtime.RequiredError('adminUserId','Required parameter requestParameters.adminUserId was null or undefined when calling addPublicationEditor.');
        }

        if (requestParameters.publicationId === null || requestParameters.publicationId === undefined) {
            throw new runtime.RequiredError('publicationId','Required parameter requestParameters.publicationId was null or undefined when calling addPublicationEditor.');
        }

        if (requestParameters.editorUserId === null || requestParameters.editorUserId === undefined) {
            throw new runtime.RequiredError('editorUserId','Required parameter requestParameters.editorUserId was null or undefined when calling addPublicationEditor.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/admin/{adminUserId}/publication/{publicationId}/editor/{editorUserId}`.replace(`{${"adminUserId"}}`, encodeURIComponent(String(requestParameters.adminUserId))).replace(`{${"publicationId"}}`, encodeURIComponent(String(requestParameters.publicationId))).replace(`{${"editorUserId"}}`, encodeURIComponent(String(requestParameters.editorUserId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddPublicationEditorResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to add an editor to a publication
     * Adds an editor to a publication
     */
    async addPublicationEditor(requestParameters: AddPublicationEditorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddPublicationEditorResponse> {
        const response = await this.addPublicationEditorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to creare a publication
     * Creates a publication
     */
    async createPublicationRaw(requestParameters: CreatePublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePublicationResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling createPublication.');
        }

        if (requestParameters.publication === null || requestParameters.publication === undefined) {
            throw new runtime.RequiredError('publication','Required parameter requestParameters.publication was null or undefined when calling createPublication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/publication`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublicationToJSON(requestParameters.publication),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePublicationResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to creare a publication
     * Creates a publication
     */
    async createPublication(requestParameters: CreatePublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePublicationResponse> {
        const response = await this.createPublicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to delete a post from a publication
     * Deletes a post from a publication
     */
    async deletePostFromPublicationRaw(requestParameters: DeletePostFromPublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePostFromPublicationResponse>> {
        if (requestParameters.editorUserId === null || requestParameters.editorUserId === undefined) {
            throw new runtime.RequiredError('editorUserId','Required parameter requestParameters.editorUserId was null or undefined when calling deletePostFromPublication.');
        }

        if (requestParameters.publicationId === null || requestParameters.publicationId === undefined) {
            throw new runtime.RequiredError('publicationId','Required parameter requestParameters.publicationId was null or undefined when calling deletePostFromPublication.');
        }

        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling deletePostFromPublication.');
        }

        if (requestParameters.postType === null || requestParameters.postType === undefined) {
            throw new runtime.RequiredError('postType','Required parameter requestParameters.postType was null or undefined when calling deletePostFromPublication.');
        }

        const queryParameters: any = {};

        if (requestParameters.postType !== undefined) {
            queryParameters['postType'] = requestParameters.postType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/editor/{editorUserId}/publication/{publicationId}/post/{postId}`.replace(`{${"editorUserId"}}`, encodeURIComponent(String(requestParameters.editorUserId))).replace(`{${"publicationId"}}`, encodeURIComponent(String(requestParameters.publicationId))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletePostFromPublicationResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to delete a post from a publication
     * Deletes a post from a publication
     */
    async deletePostFromPublication(requestParameters: DeletePostFromPublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePostFromPublicationResponse> {
        const response = await this.deletePostFromPublicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to delete a publication
     * Deletes a publication
     */
    async deletePublicationRaw(requestParameters: DeletePublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePublicationResponse>> {
        if (requestParameters.adminUserId === null || requestParameters.adminUserId === undefined) {
            throw new runtime.RequiredError('adminUserId','Required parameter requestParameters.adminUserId was null or undefined when calling deletePublication.');
        }

        if (requestParameters.publicationId === null || requestParameters.publicationId === undefined) {
            throw new runtime.RequiredError('publicationId','Required parameter requestParameters.publicationId was null or undefined when calling deletePublication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/admin/{adminUserId}/publication/{publicationId}`.replace(`{${"adminUserId"}}`, encodeURIComponent(String(requestParameters.adminUserId))).replace(`{${"publicationId"}}`, encodeURIComponent(String(requestParameters.publicationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletePublicationResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to delete a publication
     * Deletes a publication
     */
    async deletePublication(requestParameters: DeletePublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePublicationResponse> {
        const response = await this.deletePublicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to add an editor to a publication
     * Deletes an editor to a publication
     */
    async deletePublicationEditorRaw(requestParameters: DeletePublicationEditorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePublicationEditorResponse>> {
        if (requestParameters.adminUserId === null || requestParameters.adminUserId === undefined) {
            throw new runtime.RequiredError('adminUserId','Required parameter requestParameters.adminUserId was null or undefined when calling deletePublicationEditor.');
        }

        if (requestParameters.publicationId === null || requestParameters.publicationId === undefined) {
            throw new runtime.RequiredError('publicationId','Required parameter requestParameters.publicationId was null or undefined when calling deletePublicationEditor.');
        }

        if (requestParameters.editorUserId === null || requestParameters.editorUserId === undefined) {
            throw new runtime.RequiredError('editorUserId','Required parameter requestParameters.editorUserId was null or undefined when calling deletePublicationEditor.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/admin/{adminUserId}/publication/{publicationId}/editor/{editorUserId}`.replace(`{${"adminUserId"}}`, encodeURIComponent(String(requestParameters.adminUserId))).replace(`{${"publicationId"}}`, encodeURIComponent(String(requestParameters.publicationId))).replace(`{${"editorUserId"}}`, encodeURIComponent(String(requestParameters.editorUserId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletePublicationEditorResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to add an editor to a publication
     * Deletes an editor to a publication
     */
    async deletePublicationEditor(requestParameters: DeletePublicationEditorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePublicationEditorResponse> {
        const response = await this.deletePublicationEditorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to get a publication
     * Gets a publication
     */
    async getPublicationRaw(requestParameters: GetPublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPublicationResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getPublication.');
        }

        if (requestParameters.publicationId === null || requestParameters.publicationId === undefined) {
            throw new runtime.RequiredError('publicationId','Required parameter requestParameters.publicationId was null or undefined when calling getPublication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/publication/{publicationId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"publicationId"}}`, encodeURIComponent(String(requestParameters.publicationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPublicationResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to get a publication
     * Gets a publication
     */
    async getPublication(requestParameters: GetPublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPublicationResponse> {
        const response = await this.getPublicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const DeletePostFromPublicationPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type DeletePostFromPublicationPostTypeEnum = typeof DeletePostFromPublicationPostTypeEnum[keyof typeof DeletePostFromPublicationPostTypeEnum];
