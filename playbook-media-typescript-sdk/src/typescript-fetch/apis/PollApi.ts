/* tslint:disable */
/* eslint-disable */
/**
 * Social Service
 * Solomon AI Social Service
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatePollResponse,
  DeletePollResponse,
  GetPollResponse,
  GetPollsResponse,
  InternalErrorMessageResponse,
  PathUnknownErrorMessageResponse,
  PollPost,
  RespondToPollBody,
  RespondToPollResponse,
  Status,
  ValidationErrorMessageResponse,
} from '../models/index';
import {
    CreatePollResponseFromJSON,
    CreatePollResponseToJSON,
    DeletePollResponseFromJSON,
    DeletePollResponseToJSON,
    GetPollResponseFromJSON,
    GetPollResponseToJSON,
    GetPollsResponseFromJSON,
    GetPollsResponseToJSON,
    InternalErrorMessageResponseFromJSON,
    InternalErrorMessageResponseToJSON,
    PathUnknownErrorMessageResponseFromJSON,
    PathUnknownErrorMessageResponseToJSON,
    PollPostFromJSON,
    PollPostToJSON,
    RespondToPollBodyFromJSON,
    RespondToPollBodyToJSON,
    RespondToPollResponseFromJSON,
    RespondToPollResponseToJSON,
    StatusFromJSON,
    StatusToJSON,
    ValidationErrorMessageResponseFromJSON,
    ValidationErrorMessageResponseToJSON,
} from '../models/index';

export interface CreatePollRequest {
    userId: string;
    pollPost: PollPost;
}

export interface DeletePollRequest {
    userId: string;
    postId: string;
}

export interface GetPollRequest {
    userId: string;
    postId: string;
}

export interface GetPollsRequest {
    userId: string;
}

export interface RespondToPollRequest {
    userId: string;
    pollId: string;
    respondToPollBody: RespondToPollBody;
}

/**
 * 
 */
export class PollApi extends runtime.BaseAPI {

    /**
     * This endpoint enables a client to create a poll
     * Create a poll
     */
    async createPollRaw(requestParameters: CreatePollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePollResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling createPoll.');
        }

        if (requestParameters.pollPost === null || requestParameters.pollPost === undefined) {
            throw new runtime.RequiredError('pollPost','Required parameter requestParameters.pollPost was null or undefined when calling createPoll.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/poll`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PollPostToJSON(requestParameters.pollPost),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePollResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to create a poll
     * Create a poll
     */
    async createPoll(requestParameters: CreatePollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePollResponse> {
        const response = await this.createPollRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to delete a poll
     * Delete a poll
     */
    async deletePollRaw(requestParameters: DeletePollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePollResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deletePoll.');
        }

        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling deletePoll.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/poll/{postId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletePollResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to delete a poll
     * Delete a poll
     */
    async deletePoll(requestParameters: DeletePollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePollResponse> {
        const response = await this.deletePollRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to query a poll by id
     * Get a poll
     */
    async getPollRaw(requestParameters: GetPollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPollResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getPoll.');
        }

        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling getPoll.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/poll/{postId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPollResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to query a poll by id
     * Get a poll
     */
    async getPoll(requestParameters: GetPollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPollResponse> {
        const response = await this.getPollRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to query all polls tied to a given user id
     * Get all the polls of a given user
     */
    async getPollsRaw(requestParameters: GetPollsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPollsResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getPolls.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/polls`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPollsResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to query all polls tied to a given user id
     * Get all the polls of a given user
     */
    async getPolls(requestParameters: GetPollsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPollsResponse> {
        const response = await this.getPollsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to response to a poll
     * Adds a user response to a given poll by a user
     */
    async respondToPollRaw(requestParameters: RespondToPollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RespondToPollResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling respondToPoll.');
        }

        if (requestParameters.pollId === null || requestParameters.pollId === undefined) {
            throw new runtime.RequiredError('pollId','Required parameter requestParameters.pollId was null or undefined when calling respondToPoll.');
        }

        if (requestParameters.respondToPollBody === null || requestParameters.respondToPollBody === undefined) {
            throw new runtime.RequiredError('respondToPollBody','Required parameter requestParameters.respondToPollBody was null or undefined when calling respondToPoll.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/poll/{pollId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"pollId"}}`, encodeURIComponent(String(requestParameters.pollId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RespondToPollBodyToJSON(requestParameters.respondToPollBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespondToPollResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to response to a poll
     * Adds a user response to a given poll by a user
     */
    async respondToPoll(requestParameters: RespondToPollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RespondToPollResponse> {
        const response = await this.respondToPollRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
