/* tslint:disable */
/* eslint-disable */
/**
 * Social Service
 * Solomon AI Social Service
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateCommentReplyBody,
  CreateCommentReplyResponse,
  DeleteCommentReplyResponse,
  EditCommentReplyBody,
  EditCommentReplyResponse,
  GetCommentRepliesResponse,
  InternalErrorMessageResponse,
  PathUnknownErrorMessageResponse,
  ReportCommentReplyBody,
  ReportCommentReplyResponse,
  Status,
  ValidationErrorMessageResponse,
} from '../models/index';
import {
    CreateCommentReplyBodyFromJSON,
    CreateCommentReplyBodyToJSON,
    CreateCommentReplyResponseFromJSON,
    CreateCommentReplyResponseToJSON,
    DeleteCommentReplyResponseFromJSON,
    DeleteCommentReplyResponseToJSON,
    EditCommentReplyBodyFromJSON,
    EditCommentReplyBodyToJSON,
    EditCommentReplyResponseFromJSON,
    EditCommentReplyResponseToJSON,
    GetCommentRepliesResponseFromJSON,
    GetCommentRepliesResponseToJSON,
    InternalErrorMessageResponseFromJSON,
    InternalErrorMessageResponseToJSON,
    PathUnknownErrorMessageResponseFromJSON,
    PathUnknownErrorMessageResponseToJSON,
    ReportCommentReplyBodyFromJSON,
    ReportCommentReplyBodyToJSON,
    ReportCommentReplyResponseFromJSON,
    ReportCommentReplyResponseToJSON,
    StatusFromJSON,
    StatusToJSON,
    ValidationErrorMessageResponseFromJSON,
    ValidationErrorMessageResponseToJSON,
} from '../models/index';

export interface CreateCommentReplyRequest {
    userId: string;
    postId: string;
    commentId: string;
    createCommentReplyBody: CreateCommentReplyBody;
}

export interface DeleteCommentReplyRequest {
    userId: string;
    postId: string;
    commentId: string;
    replyId: string;
    postType: DeleteCommentReplyPostTypeEnum;
}

export interface EditCommentReplyRequest {
    userId: string;
    postId: string;
    commentId: string;
    replyId: string;
    editCommentReplyBody: EditCommentReplyBody;
}

export interface GetCommentRepliesRequest {
    userId: string;
    postId: string;
    commentId: string;
    postType: GetCommentRepliesPostTypeEnum;
}

export interface ReportCommentReplyRequest {
    userId: string;
    postId: string;
    commentId: string;
    replyId: string;
    reportCommentReplyBody: ReportCommentReplyBody;
}

/**
 * 
 */
export class CommentReplyApi extends runtime.BaseAPI {

    /**
     * This endpoint enables a client to reply to a comment
     * Reply To A Comment
     */
    async createCommentReplyRaw(requestParameters: CreateCommentReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCommentReplyResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling createCommentReply.');
        }

        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling createCommentReply.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling createCommentReply.');
        }

        if (requestParameters.createCommentReplyBody === null || requestParameters.createCommentReplyBody === undefined) {
            throw new runtime.RequiredError('createCommentReplyBody','Required parameter requestParameters.createCommentReplyBody was null or undefined when calling createCommentReply.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/post/{postId}/comment/{commentId}/reply`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCommentReplyBodyToJSON(requestParameters.createCommentReplyBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCommentReplyResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to reply to a comment
     * Reply To A Comment
     */
    async createCommentReply(requestParameters: CreateCommentReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCommentReplyResponse> {
        const response = await this.createCommentReplyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to delete a comment reply
     * Delete A Comment Reply
     */
    async deleteCommentReplyRaw(requestParameters: DeleteCommentReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteCommentReplyResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteCommentReply.');
        }

        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling deleteCommentReply.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling deleteCommentReply.');
        }

        if (requestParameters.replyId === null || requestParameters.replyId === undefined) {
            throw new runtime.RequiredError('replyId','Required parameter requestParameters.replyId was null or undefined when calling deleteCommentReply.');
        }

        if (requestParameters.postType === null || requestParameters.postType === undefined) {
            throw new runtime.RequiredError('postType','Required parameter requestParameters.postType was null or undefined when calling deleteCommentReply.');
        }

        const queryParameters: any = {};

        if (requestParameters.postType !== undefined) {
            queryParameters['postType'] = requestParameters.postType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/post/{postId}/comment/{commentId}/reply/{replyId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))).replace(`{${"replyId"}}`, encodeURIComponent(String(requestParameters.replyId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteCommentReplyResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to delete a comment reply
     * Delete A Comment Reply
     */
    async deleteCommentReply(requestParameters: DeleteCommentReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteCommentReplyResponse> {
        const response = await this.deleteCommentReplyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to edit a comment reply
     * Edit A Comment Reply
     */
    async editCommentReplyRaw(requestParameters: EditCommentReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EditCommentReplyResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling editCommentReply.');
        }

        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling editCommentReply.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling editCommentReply.');
        }

        if (requestParameters.replyId === null || requestParameters.replyId === undefined) {
            throw new runtime.RequiredError('replyId','Required parameter requestParameters.replyId was null or undefined when calling editCommentReply.');
        }

        if (requestParameters.editCommentReplyBody === null || requestParameters.editCommentReplyBody === undefined) {
            throw new runtime.RequiredError('editCommentReplyBody','Required parameter requestParameters.editCommentReplyBody was null or undefined when calling editCommentReply.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/post/{postId}/comment/{commentId}/reply/{replyId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))).replace(`{${"replyId"}}`, encodeURIComponent(String(requestParameters.replyId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EditCommentReplyBodyToJSON(requestParameters.editCommentReplyBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EditCommentReplyResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to edit a comment reply
     * Edit A Comment Reply
     */
    async editCommentReply(requestParameters: EditCommentReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EditCommentReplyResponse> {
        const response = await this.editCommentReplyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to get comment replies
     * Get Comment Replies
     */
    async getCommentRepliesRaw(requestParameters: GetCommentRepliesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCommentRepliesResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getCommentReplies.');
        }

        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling getCommentReplies.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling getCommentReplies.');
        }

        if (requestParameters.postType === null || requestParameters.postType === undefined) {
            throw new runtime.RequiredError('postType','Required parameter requestParameters.postType was null or undefined when calling getCommentReplies.');
        }

        const queryParameters: any = {};

        if (requestParameters.postType !== undefined) {
            queryParameters['postType'] = requestParameters.postType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/post/{postId}/comment/{commentId}/replies`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCommentRepliesResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to get comment replies
     * Get Comment Replies
     */
    async getCommentReplies(requestParameters: GetCommentRepliesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCommentRepliesResponse> {
        const response = await this.getCommentRepliesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to report a comment reply
     * Report A Comment Reply
     */
    async reportCommentReplyRaw(requestParameters: ReportCommentReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportCommentReplyResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling reportCommentReply.');
        }

        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling reportCommentReply.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling reportCommentReply.');
        }

        if (requestParameters.replyId === null || requestParameters.replyId === undefined) {
            throw new runtime.RequiredError('replyId','Required parameter requestParameters.replyId was null or undefined when calling reportCommentReply.');
        }

        if (requestParameters.reportCommentReplyBody === null || requestParameters.reportCommentReplyBody === undefined) {
            throw new runtime.RequiredError('reportCommentReplyBody','Required parameter requestParameters.reportCommentReplyBody was null or undefined when calling reportCommentReply.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/post/{postId}/comment/{commentId}/reply/{replyId}/report`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))).replace(`{${"replyId"}}`, encodeURIComponent(String(requestParameters.replyId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReportCommentReplyBodyToJSON(requestParameters.reportCommentReplyBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportCommentReplyResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to report a comment reply
     * Report A Comment Reply
     */
    async reportCommentReply(requestParameters: ReportCommentReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportCommentReplyResponse> {
        const response = await this.reportCommentReplyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const DeleteCommentReplyPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type DeleteCommentReplyPostTypeEnum = typeof DeleteCommentReplyPostTypeEnum[keyof typeof DeleteCommentReplyPostTypeEnum];
/**
 * @export
 */
export const GetCommentRepliesPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type GetCommentRepliesPostTypeEnum = typeof GetCommentRepliesPostTypeEnum[keyof typeof GetCommentRepliesPostTypeEnum];
