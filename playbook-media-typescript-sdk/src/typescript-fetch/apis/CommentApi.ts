/* tslint:disable */
/* eslint-disable */
/**
 * Social Service
 * Solomon AI Social Service
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddCommentQualityScoreResponse,
  Comment,
  CreateCommentResponse,
  InternalErrorMessageResponse,
  PathUnknownErrorMessageResponse,
  ReportCommentBody,
  ReportCommentResponse,
  Status,
  ValidationErrorMessageResponse,
} from '../models/index';
import {
    AddCommentQualityScoreResponseFromJSON,
    AddCommentQualityScoreResponseToJSON,
    CommentFromJSON,
    CommentToJSON,
    CreateCommentResponseFromJSON,
    CreateCommentResponseToJSON,
    InternalErrorMessageResponseFromJSON,
    InternalErrorMessageResponseToJSON,
    PathUnknownErrorMessageResponseFromJSON,
    PathUnknownErrorMessageResponseToJSON,
    ReportCommentBodyFromJSON,
    ReportCommentBodyToJSON,
    ReportCommentResponseFromJSON,
    ReportCommentResponseToJSON,
    StatusFromJSON,
    StatusToJSON,
    ValidationErrorMessageResponseFromJSON,
    ValidationErrorMessageResponseToJSON,
} from '../models/index';

export interface AddCommentQualityScoreRequest {
    userId: string;
    postId: string;
    commentId: string;
    postType: AddCommentQualityScorePostTypeEnum;
    body: string;
}

export interface CreateCommentRequest {
    userId: string;
    postId: string;
    accountType: CreateCommentAccountTypeEnum;
    postType: CreateCommentPostTypeEnum;
    comment: Comment;
    communityProfileId?: string;
}

export interface DeleteCommentRequest {
    postId: string;
    commentId: string;
    postType: DeleteCommentPostTypeEnum;
}

export interface ReportCommentRequest {
    userId: string;
    postId: string;
    commentId: string;
    reportCommentBody: ReportCommentBody;
}

/**
 * 
 */
export class CommentApi extends runtime.BaseAPI {

    /**
     * This endpoint enables a client to add a quality score to a comment
     * Add Comment Quality Score
     */
    async addCommentQualityScoreRaw(requestParameters: AddCommentQualityScoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddCommentQualityScoreResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addCommentQualityScore.');
        }

        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling addCommentQualityScore.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling addCommentQualityScore.');
        }

        if (requestParameters.postType === null || requestParameters.postType === undefined) {
            throw new runtime.RequiredError('postType','Required parameter requestParameters.postType was null or undefined when calling addCommentQualityScore.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addCommentQualityScore.');
        }

        const queryParameters: any = {};

        if (requestParameters.postType !== undefined) {
            queryParameters['postType'] = requestParameters.postType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/post/{postId}/comment/{commentId}/quality`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddCommentQualityScoreResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to add a quality score to a comment
     * Add Comment Quality Score
     */
    async addCommentQualityScore(requestParameters: AddCommentQualityScoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddCommentQualityScoreResponse> {
        const response = await this.addCommentQualityScoreRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to create a comment
     * Create A Commnet
     */
    async createCommentRaw(requestParameters: CreateCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCommentResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling createComment.');
        }

        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling createComment.');
        }

        if (requestParameters.accountType === null || requestParameters.accountType === undefined) {
            throw new runtime.RequiredError('accountType','Required parameter requestParameters.accountType was null or undefined when calling createComment.');
        }

        if (requestParameters.postType === null || requestParameters.postType === undefined) {
            throw new runtime.RequiredError('postType','Required parameter requestParameters.postType was null or undefined when calling createComment.');
        }

        if (requestParameters.comment === null || requestParameters.comment === undefined) {
            throw new runtime.RequiredError('comment','Required parameter requestParameters.comment was null or undefined when calling createComment.');
        }

        const queryParameters: any = {};

        if (requestParameters.communityProfileId !== undefined) {
            queryParameters['communityProfileId'] = requestParameters.communityProfileId;
        }

        if (requestParameters.accountType !== undefined) {
            queryParameters['accountType'] = requestParameters.accountType;
        }

        if (requestParameters.postType !== undefined) {
            queryParameters['postType'] = requestParameters.postType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/post/{postId}/comment`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentToJSON(requestParameters.comment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCommentResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to create a comment
     * Create A Commnet
     */
    async createComment(requestParameters: CreateCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCommentResponse> {
        const response = await this.createCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to delete a comment
     * Delete A Comment
     */
    async deleteCommentRaw(requestParameters: DeleteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCommentResponse>> {
        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling deleteComment.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling deleteComment.');
        }

        if (requestParameters.postType === null || requestParameters.postType === undefined) {
            throw new runtime.RequiredError('postType','Required parameter requestParameters.postType was null or undefined when calling deleteComment.');
        }

        const queryParameters: any = {};

        if (requestParameters.postType !== undefined) {
            queryParameters['postType'] = requestParameters.postType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/post/{postId}/comment/{commentId}`.replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCommentResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to delete a comment
     * Delete A Comment
     */
    async deleteComment(requestParameters: DeleteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCommentResponse> {
        const response = await this.deleteCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to report a comment
     * Report A Comment
     */
    async reportCommentRaw(requestParameters: ReportCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportCommentResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling reportComment.');
        }

        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling reportComment.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling reportComment.');
        }

        if (requestParameters.reportCommentBody === null || requestParameters.reportCommentBody === undefined) {
            throw new runtime.RequiredError('reportCommentBody','Required parameter requestParameters.reportCommentBody was null or undefined when calling reportComment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/post/{postId}/comment/{commentId}/report`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReportCommentBodyToJSON(requestParameters.reportCommentBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportCommentResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to report a comment
     * Report A Comment
     */
    async reportComment(requestParameters: ReportCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportCommentResponse> {
        const response = await this.reportCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AddCommentQualityScorePostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type AddCommentQualityScorePostTypeEnum = typeof AddCommentQualityScorePostTypeEnum[keyof typeof AddCommentQualityScorePostTypeEnum];
/**
 * @export
 */
export const CreateCommentAccountTypeEnum = {
    Unspecified: 'ACCOUNT_TYPE_UNSPECIFIED',
    User: 'ACCOUNT_TYPE_USER',
    Community: 'ACCOUNT_TYPE_COMMUNITY'
} as const;
export type CreateCommentAccountTypeEnum = typeof CreateCommentAccountTypeEnum[keyof typeof CreateCommentAccountTypeEnum];
/**
 * @export
 */
export const CreateCommentPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type CreateCommentPostTypeEnum = typeof CreateCommentPostTypeEnum[keyof typeof CreateCommentPostTypeEnum];
/**
 * @export
 */
export const DeleteCommentPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type DeleteCommentPostTypeEnum = typeof DeleteCommentPostTypeEnum[keyof typeof DeleteCommentPostTypeEnum];
