/* tslint:disable */
/* eslint-disable */
/**
 * Social Service
 * Solomon AI Social Service
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddPostQualityScoreResponse,
  CreatePostResponse,
  DeletePostResponse,
  EditPostResponse,
  GetBlogPostsByTagResponse,
  GetCommunityBlogPostsResponse,
  GetPostResponse,
  GetPostsByTopicResponse,
  InternalErrorMessageResponse,
  PathUnknownErrorMessageResponse,
  Post,
  ReportPostResponse,
  Status,
  ValidationErrorMessageResponse,
} from '../models/index';
import {
    AddPostQualityScoreResponseFromJSON,
    AddPostQualityScoreResponseToJSON,
    CreatePostResponseFromJSON,
    CreatePostResponseToJSON,
    DeletePostResponseFromJSON,
    DeletePostResponseToJSON,
    EditPostResponseFromJSON,
    EditPostResponseToJSON,
    GetBlogPostsByTagResponseFromJSON,
    GetBlogPostsByTagResponseToJSON,
    GetCommunityBlogPostsResponseFromJSON,
    GetCommunityBlogPostsResponseToJSON,
    GetPostResponseFromJSON,
    GetPostResponseToJSON,
    GetPostsByTopicResponseFromJSON,
    GetPostsByTopicResponseToJSON,
    InternalErrorMessageResponseFromJSON,
    InternalErrorMessageResponseToJSON,
    PathUnknownErrorMessageResponseFromJSON,
    PathUnknownErrorMessageResponseToJSON,
    PostFromJSON,
    PostToJSON,
    ReportPostResponseFromJSON,
    ReportPostResponseToJSON,
    StatusFromJSON,
    StatusToJSON,
    ValidationErrorMessageResponseFromJSON,
    ValidationErrorMessageResponseToJSON,
} from '../models/index';

export interface AddPostQualityScoreRequest {
    userId: string;
    postId: string;
    postType: AddPostQualityScorePostTypeEnum;
    body: string;
}

export interface CreatePostRequest {
    userId: string;
    accountType: CreatePostAccountTypeEnum;
    post: Post;
    communityProfileId?: string;
}

export interface DeletePostRequest {
    userId: string;
    postId: string;
    postType: DeletePostPostTypeEnum;
}

export interface EditPostRequest {
    postId: string;
    postType: EditPostPostTypeEnum;
    post: Post;
}

export interface GetBlogPostsByTagRequest {
    tag: string;
    postType: GetBlogPostsByTagPostTypeEnum;
}

export interface GetCommunityBlogPostsRequest {
    communityProfileId: string;
}

export interface GetPostRequest {
    userId: string;
    postId: string;
    postType: GetPostPostTypeEnum;
}

export interface GetPostsByTopicRequest {
    communityProfileId: string;
    topicName: string;
}

export interface ReportPostRequest {
    userId: string;
    postId: string;
    postType: ReportPostPostTypeEnum;
}

/**
 * 
 */
export class PostApi extends runtime.BaseAPI {

    /**
     * This endpoint enables a client add a quality score to a post
     * Adds a quality score to a post
     */
    async addPostQualityScoreRaw(requestParameters: AddPostQualityScoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddPostQualityScoreResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addPostQualityScore.');
        }

        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling addPostQualityScore.');
        }

        if (requestParameters.postType === null || requestParameters.postType === undefined) {
            throw new runtime.RequiredError('postType','Required parameter requestParameters.postType was null or undefined when calling addPostQualityScore.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addPostQualityScore.');
        }

        const queryParameters: any = {};

        if (requestParameters.postType !== undefined) {
            queryParameters['postType'] = requestParameters.postType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/post/{postId}/quality`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddPostQualityScoreResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client add a quality score to a post
     * Adds a quality score to a post
     */
    async addPostQualityScore(requestParameters: AddPostQualityScoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddPostQualityScoreResponse> {
        const response = await this.addPostQualityScoreRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to create a post
     * Create a post
     */
    async createPostRaw(requestParameters: CreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePostResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling createPost.');
        }

        if (requestParameters.accountType === null || requestParameters.accountType === undefined) {
            throw new runtime.RequiredError('accountType','Required parameter requestParameters.accountType was null or undefined when calling createPost.');
        }

        if (requestParameters.post === null || requestParameters.post === undefined) {
            throw new runtime.RequiredError('post','Required parameter requestParameters.post was null or undefined when calling createPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.communityProfileId !== undefined) {
            queryParameters['communityProfileId'] = requestParameters.communityProfileId;
        }

        if (requestParameters.accountType !== undefined) {
            queryParameters['accountType'] = requestParameters.accountType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/post`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostToJSON(requestParameters.post),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePostResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to create a post
     * Create a post
     */
    async createPost(requestParameters: CreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePostResponse> {
        const response = await this.createPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to delete a post
     * Delete a post
     */
    async deletePostRaw(requestParameters: DeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePostResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deletePost.');
        }

        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling deletePost.');
        }

        if (requestParameters.postType === null || requestParameters.postType === undefined) {
            throw new runtime.RequiredError('postType','Required parameter requestParameters.postType was null or undefined when calling deletePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/post/{postId}/type/{postType}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))).replace(`{${"postType"}}`, encodeURIComponent(String(requestParameters.postType))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletePostResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to delete a post
     * Delete a post
     */
    async deletePost(requestParameters: DeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePostResponse> {
        const response = await this.deletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to edit a post by id
     * Edits a post by id
     */
    async editPostRaw(requestParameters: EditPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EditPostResponse>> {
        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling editPost.');
        }

        if (requestParameters.postType === null || requestParameters.postType === undefined) {
            throw new runtime.RequiredError('postType','Required parameter requestParameters.postType was null or undefined when calling editPost.');
        }

        if (requestParameters.post === null || requestParameters.post === undefined) {
            throw new runtime.RequiredError('post','Required parameter requestParameters.post was null or undefined when calling editPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/post/{postId}/type/{postType}`.replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))).replace(`{${"postType"}}`, encodeURIComponent(String(requestParameters.postType))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostToJSON(requestParameters.post),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EditPostResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to edit a post by id
     * Edits a post by id
     */
    async editPost(requestParameters: EditPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EditPostResponse> {
        const response = await this.editPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to query a set of blog posts tied to a tag
     * Get blog posts by tag
     */
    async getBlogPostsByTagRaw(requestParameters: GetBlogPostsByTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBlogPostsByTagResponse>> {
        if (requestParameters.tag === null || requestParameters.tag === undefined) {
            throw new runtime.RequiredError('tag','Required parameter requestParameters.tag was null or undefined when calling getBlogPostsByTag.');
        }

        if (requestParameters.postType === null || requestParameters.postType === undefined) {
            throw new runtime.RequiredError('postType','Required parameter requestParameters.postType was null or undefined when calling getBlogPostsByTag.');
        }

        const queryParameters: any = {};

        if (requestParameters.postType !== undefined) {
            queryParameters['postType'] = requestParameters.postType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/posts/blog/tag/{tag}`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBlogPostsByTagResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to query a set of blog posts tied to a tag
     * Get blog posts by tag
     */
    async getBlogPostsByTag(requestParameters: GetBlogPostsByTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBlogPostsByTagResponse> {
        const response = await this.getBlogPostsByTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to get community blog posts
     * Get community blog posts
     */
    async getCommunityBlogPostsRaw(requestParameters: GetCommunityBlogPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCommunityBlogPostsResponse>> {
        if (requestParameters.communityProfileId === null || requestParameters.communityProfileId === undefined) {
            throw new runtime.RequiredError('communityProfileId','Required parameter requestParameters.communityProfileId was null or undefined when calling getCommunityBlogPosts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/community-profiles/{communityProfileId}/posts/blog`.replace(`{${"communityProfileId"}}`, encodeURIComponent(String(requestParameters.communityProfileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCommunityBlogPostsResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to get community blog posts
     * Get community blog posts
     */
    async getCommunityBlogPosts(requestParameters: GetCommunityBlogPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCommunityBlogPostsResponse> {
        const response = await this.getCommunityBlogPostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to get a post
     * Get a post
     */
    async getPostRaw(requestParameters: GetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPostResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getPost.');
        }

        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling getPost.');
        }

        if (requestParameters.postType === null || requestParameters.postType === undefined) {
            throw new runtime.RequiredError('postType','Required parameter requestParameters.postType was null or undefined when calling getPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/post/{postId}/type/{postType}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))).replace(`{${"postType"}}`, encodeURIComponent(String(requestParameters.postType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPostResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to get a post
     * Get a post
     */
    async getPost(requestParameters: GetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPostResponse> {
        const response = await this.getPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to get all posts tied to a topic
     * Get all posts associated with a topic
     */
    async getPostsByTopicRaw(requestParameters: GetPostsByTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPostsByTopicResponse>> {
        if (requestParameters.communityProfileId === null || requestParameters.communityProfileId === undefined) {
            throw new runtime.RequiredError('communityProfileId','Required parameter requestParameters.communityProfileId was null or undefined when calling getPostsByTopic.');
        }

        if (requestParameters.topicName === null || requestParameters.topicName === undefined) {
            throw new runtime.RequiredError('topicName','Required parameter requestParameters.topicName was null or undefined when calling getPostsByTopic.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/community/{communityProfileId}/topic/{topicName}/posts`.replace(`{${"communityProfileId"}}`, encodeURIComponent(String(requestParameters.communityProfileId))).replace(`{${"topicName"}}`, encodeURIComponent(String(requestParameters.topicName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPostsByTopicResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to get all posts tied to a topic
     * Get all posts associated with a topic
     */
    async getPostsByTopic(requestParameters: GetPostsByTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPostsByTopicResponse> {
        const response = await this.getPostsByTopicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to report a post
     * Report a post
     */
    async reportPostRaw(requestParameters: ReportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportPostResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling reportPost.');
        }

        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling reportPost.');
        }

        if (requestParameters.postType === null || requestParameters.postType === undefined) {
            throw new runtime.RequiredError('postType','Required parameter requestParameters.postType was null or undefined when calling reportPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/post/{postId}/type/{postType}/report`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))).replace(`{${"postType"}}`, encodeURIComponent(String(requestParameters.postType))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportPostResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to report a post
     * Report a post
     */
    async reportPost(requestParameters: ReportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportPostResponse> {
        const response = await this.reportPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AddPostQualityScorePostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type AddPostQualityScorePostTypeEnum = typeof AddPostQualityScorePostTypeEnum[keyof typeof AddPostQualityScorePostTypeEnum];
/**
 * @export
 */
export const CreatePostAccountTypeEnum = {
    Unspecified: 'ACCOUNT_TYPE_UNSPECIFIED',
    User: 'ACCOUNT_TYPE_USER',
    Community: 'ACCOUNT_TYPE_COMMUNITY'
} as const;
export type CreatePostAccountTypeEnum = typeof CreatePostAccountTypeEnum[keyof typeof CreatePostAccountTypeEnum];
/**
 * @export
 */
export const DeletePostPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type DeletePostPostTypeEnum = typeof DeletePostPostTypeEnum[keyof typeof DeletePostPostTypeEnum];
/**
 * @export
 */
export const EditPostPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type EditPostPostTypeEnum = typeof EditPostPostTypeEnum[keyof typeof EditPostPostTypeEnum];
/**
 * @export
 */
export const GetBlogPostsByTagPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type GetBlogPostsByTagPostTypeEnum = typeof GetBlogPostsByTagPostTypeEnum[keyof typeof GetBlogPostsByTagPostTypeEnum];
/**
 * @export
 */
export const GetPostPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type GetPostPostTypeEnum = typeof GetPostPostTypeEnum[keyof typeof GetPostPostTypeEnum];
/**
 * @export
 */
export const ReportPostPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type ReportPostPostTypeEnum = typeof ReportPostPostTypeEnum[keyof typeof ReportPostPostTypeEnum];
