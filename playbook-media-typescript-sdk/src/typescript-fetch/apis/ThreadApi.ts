/* tslint:disable */
/* eslint-disable */
/**
 * Social Service
 * Solomon AI Social Service
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddPostToThreadResponse,
  GetPostThreadResponse,
  InternalErrorMessageResponse,
  PathUnknownErrorMessageResponse,
  Post,
  RemovePostFromThreadResponse,
  Status,
  ValidationErrorMessageResponse,
} from '../models/index';
import {
    AddPostToThreadResponseFromJSON,
    AddPostToThreadResponseToJSON,
    GetPostThreadResponseFromJSON,
    GetPostThreadResponseToJSON,
    InternalErrorMessageResponseFromJSON,
    InternalErrorMessageResponseToJSON,
    PathUnknownErrorMessageResponseFromJSON,
    PathUnknownErrorMessageResponseToJSON,
    PostFromJSON,
    PostToJSON,
    RemovePostFromThreadResponseFromJSON,
    RemovePostFromThreadResponseToJSON,
    StatusFromJSON,
    StatusToJSON,
    ValidationErrorMessageResponseFromJSON,
    ValidationErrorMessageResponseToJSON,
} from '../models/index';

export interface AddPostToThreadRequest {
    userId: string;
    parentPostId: string;
    postType: AddPostToThreadPostTypeEnum;
    post: Post;
}

export interface GetPostThreadRequest {
    userId: string;
    postId: string;
    postType: GetPostThreadPostTypeEnum;
}

export interface RemovePostFromThreadRequest {
    userId: string;
    parentPostId: string;
    postType: RemovePostFromThreadPostTypeEnum;
    participantPostId: string;
}

/**
 * 
 */
export class ThreadApi extends runtime.BaseAPI {

    /**
     * This endpoint enables a client to add a post to a thread
     * Adds A Post To A Thread
     */
    async addPostToThreadRaw(requestParameters: AddPostToThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddPostToThreadResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addPostToThread.');
        }

        if (requestParameters.parentPostId === null || requestParameters.parentPostId === undefined) {
            throw new runtime.RequiredError('parentPostId','Required parameter requestParameters.parentPostId was null or undefined when calling addPostToThread.');
        }

        if (requestParameters.postType === null || requestParameters.postType === undefined) {
            throw new runtime.RequiredError('postType','Required parameter requestParameters.postType was null or undefined when calling addPostToThread.');
        }

        if (requestParameters.post === null || requestParameters.post === undefined) {
            throw new runtime.RequiredError('post','Required parameter requestParameters.post was null or undefined when calling addPostToThread.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/post/thread/{parentPostId}/type/{postType}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"parentPostId"}}`, encodeURIComponent(String(requestParameters.parentPostId))).replace(`{${"postType"}}`, encodeURIComponent(String(requestParameters.postType))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostToJSON(requestParameters.post),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddPostToThreadResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to add a post to a thread
     * Adds A Post To A Thread
     */
    async addPostToThread(requestParameters: AddPostToThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddPostToThreadResponse> {
        const response = await this.addPostToThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to query a post\'s thread
     * Gets A Post\'s Thread
     */
    async getPostThreadRaw(requestParameters: GetPostThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPostThreadResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getPostThread.');
        }

        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling getPostThread.');
        }

        if (requestParameters.postType === null || requestParameters.postType === undefined) {
            throw new runtime.RequiredError('postType','Required parameter requestParameters.postType was null or undefined when calling getPostThread.');
        }

        const queryParameters: any = {};

        if (requestParameters.postType !== undefined) {
            queryParameters['postType'] = requestParameters.postType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/post/thread/{postId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPostThreadResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to query a post\'s thread
     * Gets A Post\'s Thread
     */
    async getPostThread(requestParameters: GetPostThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPostThreadResponse> {
        const response = await this.getPostThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to delete a post from a thread
     * Deletes A Post From A Thread
     */
    async removePostFromThreadRaw(requestParameters: RemovePostFromThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RemovePostFromThreadResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling removePostFromThread.');
        }

        if (requestParameters.parentPostId === null || requestParameters.parentPostId === undefined) {
            throw new runtime.RequiredError('parentPostId','Required parameter requestParameters.parentPostId was null or undefined when calling removePostFromThread.');
        }

        if (requestParameters.postType === null || requestParameters.postType === undefined) {
            throw new runtime.RequiredError('postType','Required parameter requestParameters.postType was null or undefined when calling removePostFromThread.');
        }

        if (requestParameters.participantPostId === null || requestParameters.participantPostId === undefined) {
            throw new runtime.RequiredError('participantPostId','Required parameter requestParameters.participantPostId was null or undefined when calling removePostFromThread.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/post/thread/{parentPostId}/type/{postType}/target/{participantPostId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"parentPostId"}}`, encodeURIComponent(String(requestParameters.parentPostId))).replace(`{${"postType"}}`, encodeURIComponent(String(requestParameters.postType))).replace(`{${"participantPostId"}}`, encodeURIComponent(String(requestParameters.participantPostId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RemovePostFromThreadResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to delete a post from a thread
     * Deletes A Post From A Thread
     */
    async removePostFromThread(requestParameters: RemovePostFromThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RemovePostFromThreadResponse> {
        const response = await this.removePostFromThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AddPostToThreadPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type AddPostToThreadPostTypeEnum = typeof AddPostToThreadPostTypeEnum[keyof typeof AddPostToThreadPostTypeEnum];
/**
 * @export
 */
export const GetPostThreadPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type GetPostThreadPostTypeEnum = typeof GetPostThreadPostTypeEnum[keyof typeof GetPostThreadPostTypeEnum];
/**
 * @export
 */
export const RemovePostFromThreadPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type RemovePostFromThreadPostTypeEnum = typeof RemovePostFromThreadPostTypeEnum[keyof typeof RemovePostFromThreadPostTypeEnum];
