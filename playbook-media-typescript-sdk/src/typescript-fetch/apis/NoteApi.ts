/* tslint:disable */
/* eslint-disable */
/**
 * Social Service
 * Solomon AI Social Service
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateNoteBody,
  CreateNoteResponse,
  DeleteNoteResponse,
  EditNoteResponse,
  InternalErrorMessageResponse,
  Note,
  PathUnknownErrorMessageResponse,
  Status,
  ValidationErrorMessageResponse,
} from '../models/index';
import {
    CreateNoteBodyFromJSON,
    CreateNoteBodyToJSON,
    CreateNoteResponseFromJSON,
    CreateNoteResponseToJSON,
    DeleteNoteResponseFromJSON,
    DeleteNoteResponseToJSON,
    EditNoteResponseFromJSON,
    EditNoteResponseToJSON,
    InternalErrorMessageResponseFromJSON,
    InternalErrorMessageResponseToJSON,
    NoteFromJSON,
    NoteToJSON,
    PathUnknownErrorMessageResponseFromJSON,
    PathUnknownErrorMessageResponseToJSON,
    StatusFromJSON,
    StatusToJSON,
    ValidationErrorMessageResponseFromJSON,
    ValidationErrorMessageResponseToJSON,
} from '../models/index';

export interface CreateNoteRequest {
    userId: string;
    postId: string;
    createNoteBody: CreateNoteBody;
}

export interface DeleteNoteRequest {
    userId: string;
    postId: string;
    noteId: string;
    postType: DeleteNotePostTypeEnum;
}

export interface EditNoteRequest {
    userId: string;
    postId: string;
    noteId: string;
    postType: EditNotePostTypeEnum;
    note: Note;
}

/**
 * 
 */
export class NoteApi extends runtime.BaseAPI {

    /**
     * This endpoint enables a client to create and associate a not to a post
     * Creates and associates a note to a given post
     */
    async createNoteRaw(requestParameters: CreateNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateNoteResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling createNote.');
        }

        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling createNote.');
        }

        if (requestParameters.createNoteBody === null || requestParameters.createNoteBody === undefined) {
            throw new runtime.RequiredError('createNoteBody','Required parameter requestParameters.createNoteBody was null or undefined when calling createNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/post/{postId}/note`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateNoteBodyToJSON(requestParameters.createNoteBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateNoteResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to create and associate a not to a post
     * Creates and associates a note to a given post
     */
    async createNote(requestParameters: CreateNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateNoteResponse> {
        const response = await this.createNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to delete a note
     * Delete a note
     */
    async deleteNoteRaw(requestParameters: DeleteNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteNoteResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteNote.');
        }

        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling deleteNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling deleteNote.');
        }

        if (requestParameters.postType === null || requestParameters.postType === undefined) {
            throw new runtime.RequiredError('postType','Required parameter requestParameters.postType was null or undefined when calling deleteNote.');
        }

        const queryParameters: any = {};

        if (requestParameters.postType !== undefined) {
            queryParameters['postType'] = requestParameters.postType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/post/{postId}/note/{noteId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteNoteResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to delete a note
     * Delete a note
     */
    async deleteNote(requestParameters: DeleteNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteNoteResponse> {
        const response = await this.deleteNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to update a note
     * Update a note
     */
    async editNoteRaw(requestParameters: EditNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EditNoteResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling editNote.');
        }

        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling editNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling editNote.');
        }

        if (requestParameters.postType === null || requestParameters.postType === undefined) {
            throw new runtime.RequiredError('postType','Required parameter requestParameters.postType was null or undefined when calling editNote.');
        }

        if (requestParameters.note === null || requestParameters.note === undefined) {
            throw new runtime.RequiredError('note','Required parameter requestParameters.note was null or undefined when calling editNote.');
        }

        const queryParameters: any = {};

        if (requestParameters.postType !== undefined) {
            queryParameters['postType'] = requestParameters.postType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/{userId}/post/{postId}/note/{noteId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters.postId))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NoteToJSON(requestParameters.note),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EditNoteResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to update a note
     * Update a note
     */
    async editNote(requestParameters: EditNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EditNoteResponse> {
        const response = await this.editNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const DeleteNotePostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type DeleteNotePostTypeEnum = typeof DeleteNotePostTypeEnum[keyof typeof DeleteNotePostTypeEnum];
/**
 * @export
 */
export const EditNotePostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type EditNotePostTypeEnum = typeof EditNotePostTypeEnum[keyof typeof EditNotePostTypeEnum];
