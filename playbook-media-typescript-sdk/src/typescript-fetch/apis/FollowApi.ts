/* tslint:disable */
/* eslint-disable */
/**
 * Social Service
 * Solomon AI Social Service
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAccountsFollowingResponse,
  GetFollowersResponse,
  GetPendingFollowsResponse,
  InternalErrorMessageResponse,
  PathUnknownErrorMessageResponse,
  Status,
  ValidationErrorMessageResponse,
} from '../models/index';
import {
    GetAccountsFollowingResponseFromJSON,
    GetAccountsFollowingResponseToJSON,
    GetFollowersResponseFromJSON,
    GetFollowersResponseToJSON,
    GetPendingFollowsResponseFromJSON,
    GetPendingFollowsResponseToJSON,
    InternalErrorMessageResponseFromJSON,
    InternalErrorMessageResponseToJSON,
    PathUnknownErrorMessageResponseFromJSON,
    PathUnknownErrorMessageResponseToJSON,
    StatusFromJSON,
    StatusToJSON,
    ValidationErrorMessageResponseFromJSON,
    ValidationErrorMessageResponseToJSON,
} from '../models/index';

export interface GetAccountsFollowingRequest {
    userId: string;
    profileId: string;
    accountType: GetAccountsFollowingAccountTypeEnum;
    limit: string;
}

export interface GetFollowersRequest {
    userId: string;
    profileId: string;
    limit: string;
}

export interface GetPendingFollowsRequest {
    userId: string;
}

/**
 * 
 */
export class FollowApi extends runtime.BaseAPI {

    /**
     * This endpoint enables a client to get all the accounts a given user follows
     * Get Communities and users you are following
     */
    async getAccountsFollowingRaw(requestParameters: GetAccountsFollowingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAccountsFollowingResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getAccountsFollowing.');
        }

        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getAccountsFollowing.');
        }

        if (requestParameters.accountType === null || requestParameters.accountType === undefined) {
            throw new runtime.RequiredError('accountType','Required parameter requestParameters.accountType was null or undefined when calling getAccountsFollowing.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling getAccountsFollowing.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/profile/{profileId}/account-type/{accountType}/following`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"accountType"}}`, encodeURIComponent(String(requestParameters.accountType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAccountsFollowingResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to get all the accounts a given user follows
     * Get Communities and users you are following
     */
    async getAccountsFollowing(requestParameters: GetAccountsFollowingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAccountsFollowingResponse> {
        const response = await this.getAccountsFollowingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to get all the followers following a given user
     * Get Users Following you
     */
    async getFollowersRaw(requestParameters: GetFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFollowersResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getFollowers.');
        }

        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getFollowers.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling getFollowers.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/profile/{profileId}/followers`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFollowersResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to get all the followers following a given user
     * Get Users Following you
     */
    async getFollowers(requestParameters: GetFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFollowersResponse> {
        const response = await this.getFollowersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to get all the pending follow requests
     * Get Pending Follow Requests
     */
    async getPendingFollowsRaw(requestParameters: GetPendingFollowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPendingFollowsResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getPendingFollows.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userId}/follow/pending-requests`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPendingFollowsResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to get all the pending follow requests
     * Get Pending Follow Requests
     */
    async getPendingFollows(requestParameters: GetPendingFollowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPendingFollowsResponse> {
        const response = await this.getPendingFollowsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAccountsFollowingAccountTypeEnum = {
    Unspecified: 'ACCOUNT_TYPE_UNSPECIFIED',
    User: 'ACCOUNT_TYPE_USER',
    Community: 'ACCOUNT_TYPE_COMMUNITY'
} as const;
export type GetAccountsFollowingAccountTypeEnum = typeof GetAccountsFollowingAccountTypeEnum[keyof typeof GetAccountsFollowingAccountTypeEnum];
