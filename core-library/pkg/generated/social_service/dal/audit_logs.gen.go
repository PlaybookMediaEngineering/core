// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	social_servicev2 "github.com/PlaybookMediaEngineering/core/core-library/pkg/generated/social_service/v2"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newAuditLogORM(db *gorm.DB, opts ...gen.DOOption) auditLogORM {
	_auditLogORM := auditLogORM{}

	_auditLogORM.auditLogORMDo.UseDB(db, opts...)
	_auditLogORM.auditLogORMDo.UseModel(&social_servicev2.AuditLogORM{})

	tableName := _auditLogORM.auditLogORMDo.TableName()
	_auditLogORM.ALL = field.NewAsterisk(tableName)
	_auditLogORM.Action = field.NewString(tableName, "action")
	_auditLogORM.ActionType = field.NewString(tableName, "action_type")
	_auditLogORM.AffectedEntityId = field.NewString(tableName, "affected_entity_id")
	_auditLogORM.AffectedEntityType = field.NewString(tableName, "affected_entity_type")
	_auditLogORM.Description = field.NewString(tableName, "description")
	_auditLogORM.Id = field.NewUint64(tableName, "id")
	_auditLogORM.IpAddress = field.NewString(tableName, "ip_address")
	_auditLogORM.Outcome = field.NewString(tableName, "outcome")
	_auditLogORM.TeamProfileId = field.NewUint64(tableName, "team_profile_id")
	_auditLogORM.Timestamp = field.NewString(tableName, "timestamp")
	_auditLogORM.UserId = field.NewString(tableName, "user_id")

	_auditLogORM.fillFieldMap()

	return _auditLogORM
}

type auditLogORM struct {
	auditLogORMDo

	ALL                field.Asterisk
	Action             field.String
	ActionType         field.String
	AffectedEntityId   field.String
	AffectedEntityType field.String
	Description        field.String
	Id                 field.Uint64
	IpAddress          field.String
	Outcome            field.String
	TeamProfileId      field.Uint64
	Timestamp          field.String
	UserId             field.String

	fieldMap map[string]field.Expr
}

func (a auditLogORM) Table(newTableName string) *auditLogORM {
	a.auditLogORMDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a auditLogORM) As(alias string) *auditLogORM {
	a.auditLogORMDo.DO = *(a.auditLogORMDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *auditLogORM) updateTableName(table string) *auditLogORM {
	a.ALL = field.NewAsterisk(table)
	a.Action = field.NewString(table, "action")
	a.ActionType = field.NewString(table, "action_type")
	a.AffectedEntityId = field.NewString(table, "affected_entity_id")
	a.AffectedEntityType = field.NewString(table, "affected_entity_type")
	a.Description = field.NewString(table, "description")
	a.Id = field.NewUint64(table, "id")
	a.IpAddress = field.NewString(table, "ip_address")
	a.Outcome = field.NewString(table, "outcome")
	a.TeamProfileId = field.NewUint64(table, "team_profile_id")
	a.Timestamp = field.NewString(table, "timestamp")
	a.UserId = field.NewString(table, "user_id")

	a.fillFieldMap()

	return a
}

func (a *auditLogORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *auditLogORM) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["action"] = a.Action
	a.fieldMap["action_type"] = a.ActionType
	a.fieldMap["affected_entity_id"] = a.AffectedEntityId
	a.fieldMap["affected_entity_type"] = a.AffectedEntityType
	a.fieldMap["description"] = a.Description
	a.fieldMap["id"] = a.Id
	a.fieldMap["ip_address"] = a.IpAddress
	a.fieldMap["outcome"] = a.Outcome
	a.fieldMap["team_profile_id"] = a.TeamProfileId
	a.fieldMap["timestamp"] = a.Timestamp
	a.fieldMap["user_id"] = a.UserId
}

func (a auditLogORM) clone(db *gorm.DB) auditLogORM {
	a.auditLogORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a auditLogORM) replaceDB(db *gorm.DB) auditLogORM {
	a.auditLogORMDo.ReplaceDB(db)
	return a
}

type auditLogORMDo struct{ gen.DO }

type IAuditLogORMDo interface {
	gen.SubQuery
	Debug() IAuditLogORMDo
	WithContext(ctx context.Context) IAuditLogORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAuditLogORMDo
	WriteDB() IAuditLogORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAuditLogORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAuditLogORMDo
	Not(conds ...gen.Condition) IAuditLogORMDo
	Or(conds ...gen.Condition) IAuditLogORMDo
	Select(conds ...field.Expr) IAuditLogORMDo
	Where(conds ...gen.Condition) IAuditLogORMDo
	Order(conds ...field.Expr) IAuditLogORMDo
	Distinct(cols ...field.Expr) IAuditLogORMDo
	Omit(cols ...field.Expr) IAuditLogORMDo
	Join(table schema.Tabler, on ...field.Expr) IAuditLogORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAuditLogORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAuditLogORMDo
	Group(cols ...field.Expr) IAuditLogORMDo
	Having(conds ...gen.Condition) IAuditLogORMDo
	Limit(limit int) IAuditLogORMDo
	Offset(offset int) IAuditLogORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAuditLogORMDo
	Unscoped() IAuditLogORMDo
	Create(values ...*social_servicev2.AuditLogORM) error
	CreateInBatches(values []*social_servicev2.AuditLogORM, batchSize int) error
	Save(values ...*social_servicev2.AuditLogORM) error
	First() (*social_servicev2.AuditLogORM, error)
	Take() (*social_servicev2.AuditLogORM, error)
	Last() (*social_servicev2.AuditLogORM, error)
	Find() ([]*social_servicev2.AuditLogORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*social_servicev2.AuditLogORM, err error)
	FindInBatches(result *[]*social_servicev2.AuditLogORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*social_servicev2.AuditLogORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAuditLogORMDo
	Assign(attrs ...field.AssignExpr) IAuditLogORMDo
	Joins(fields ...field.RelationField) IAuditLogORMDo
	Preload(fields ...field.RelationField) IAuditLogORMDo
	FirstOrInit() (*social_servicev2.AuditLogORM, error)
	FirstOrCreate() (*social_servicev2.AuditLogORM, error)
	FindByPage(offset int, limit int) (result []*social_servicev2.AuditLogORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAuditLogORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result social_servicev2.AuditLogORM, err error)
	GetRecordByIDs(ids []int) (result []social_servicev2.AuditLogORM, err error)
	CreateRecord(item social_servicev2.AuditLogORM) (err error)
	UpdateRecordByID(id int, item social_servicev2.AuditLogORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []social_servicev2.AuditLogORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result social_servicev2.AuditLogORM, err error)
	GetByIDs(ids []uint64) (result []social_servicev2.AuditLogORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a auditLogORMDo) GetRecordByID(id int) (result social_servicev2.AuditLogORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM audit_logs ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (a auditLogORMDo) GetRecordByIDs(ids []int) (result []social_servicev2.AuditLogORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM audit_logs ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (a auditLogORMDo) CreateRecord(item social_servicev2.AuditLogORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO audit_logs (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (a auditLogORMDo) UpdateRecordByID(id int, item social_servicev2.AuditLogORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE audit_logs SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a auditLogORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM audit_logs ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (a auditLogORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []social_servicev2.AuditLogORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM audit_logs ORDER BY " + a.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (a auditLogORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM audit_logs ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a auditLogORMDo) GetByID(id uint64) (result social_servicev2.AuditLogORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM audit_logs ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (a auditLogORMDo) GetByIDs(ids []uint64) (result []social_servicev2.AuditLogORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM audit_logs ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (a auditLogORMDo) Debug() IAuditLogORMDo {
	return a.withDO(a.DO.Debug())
}

func (a auditLogORMDo) WithContext(ctx context.Context) IAuditLogORMDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a auditLogORMDo) ReadDB() IAuditLogORMDo {
	return a.Clauses(dbresolver.Read)
}

func (a auditLogORMDo) WriteDB() IAuditLogORMDo {
	return a.Clauses(dbresolver.Write)
}

func (a auditLogORMDo) Session(config *gorm.Session) IAuditLogORMDo {
	return a.withDO(a.DO.Session(config))
}

func (a auditLogORMDo) Clauses(conds ...clause.Expression) IAuditLogORMDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a auditLogORMDo) Returning(value interface{}, columns ...string) IAuditLogORMDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a auditLogORMDo) Not(conds ...gen.Condition) IAuditLogORMDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a auditLogORMDo) Or(conds ...gen.Condition) IAuditLogORMDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a auditLogORMDo) Select(conds ...field.Expr) IAuditLogORMDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a auditLogORMDo) Where(conds ...gen.Condition) IAuditLogORMDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a auditLogORMDo) Order(conds ...field.Expr) IAuditLogORMDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a auditLogORMDo) Distinct(cols ...field.Expr) IAuditLogORMDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a auditLogORMDo) Omit(cols ...field.Expr) IAuditLogORMDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a auditLogORMDo) Join(table schema.Tabler, on ...field.Expr) IAuditLogORMDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a auditLogORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAuditLogORMDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a auditLogORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IAuditLogORMDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a auditLogORMDo) Group(cols ...field.Expr) IAuditLogORMDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a auditLogORMDo) Having(conds ...gen.Condition) IAuditLogORMDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a auditLogORMDo) Limit(limit int) IAuditLogORMDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a auditLogORMDo) Offset(offset int) IAuditLogORMDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a auditLogORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAuditLogORMDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a auditLogORMDo) Unscoped() IAuditLogORMDo {
	return a.withDO(a.DO.Unscoped())
}

func (a auditLogORMDo) Create(values ...*social_servicev2.AuditLogORM) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a auditLogORMDo) CreateInBatches(values []*social_servicev2.AuditLogORM, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a auditLogORMDo) Save(values ...*social_servicev2.AuditLogORM) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a auditLogORMDo) First() (*social_servicev2.AuditLogORM, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.AuditLogORM), nil
	}
}

func (a auditLogORMDo) Take() (*social_servicev2.AuditLogORM, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.AuditLogORM), nil
	}
}

func (a auditLogORMDo) Last() (*social_servicev2.AuditLogORM, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.AuditLogORM), nil
	}
}

func (a auditLogORMDo) Find() ([]*social_servicev2.AuditLogORM, error) {
	result, err := a.DO.Find()
	return result.([]*social_servicev2.AuditLogORM), err
}

func (a auditLogORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*social_servicev2.AuditLogORM, err error) {
	buf := make([]*social_servicev2.AuditLogORM, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a auditLogORMDo) FindInBatches(result *[]*social_servicev2.AuditLogORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a auditLogORMDo) Attrs(attrs ...field.AssignExpr) IAuditLogORMDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a auditLogORMDo) Assign(attrs ...field.AssignExpr) IAuditLogORMDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a auditLogORMDo) Joins(fields ...field.RelationField) IAuditLogORMDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a auditLogORMDo) Preload(fields ...field.RelationField) IAuditLogORMDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a auditLogORMDo) FirstOrInit() (*social_servicev2.AuditLogORM, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.AuditLogORM), nil
	}
}

func (a auditLogORMDo) FirstOrCreate() (*social_servicev2.AuditLogORM, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.AuditLogORM), nil
	}
}

func (a auditLogORMDo) FindByPage(offset int, limit int) (result []*social_servicev2.AuditLogORM, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a auditLogORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a auditLogORMDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a auditLogORMDo) Delete(models ...*social_servicev2.AuditLogORM) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *auditLogORMDo) withDO(do gen.Dao) *auditLogORMDo {
	a.DO = *do.(*gen.DO)
	return a
}
