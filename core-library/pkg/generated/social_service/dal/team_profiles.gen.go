// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	social_servicev2 "github.com/PlaybookMediaEngineering/core/core-library/pkg/generated/social_service/v2"
)

func newTeamProfileORM(db *gorm.DB, opts ...gen.DOOption) teamProfileORM {
	_teamProfileORM := teamProfileORM{}

	_teamProfileORM.teamProfileORMDo.UseDB(db, opts...)
	_teamProfileORM.teamProfileORMDo.UseModel(&social_servicev2.TeamProfileORM{})

	tableName := _teamProfileORM.teamProfileORMDo.TableName()
	_teamProfileORM.ALL = field.NewAsterisk(tableName)
	_teamProfileORM.CreatedAt = field.NewString(tableName, "created_at")
	_teamProfileORM.Description = field.NewString(tableName, "description")
	_teamProfileORM.FocusAreas = field.NewField(tableName, "focus_areas")
	_teamProfileORM.Id = field.NewUint64(tableName, "id")
	_teamProfileORM.Tags = field.NewField(tableName, "tags")
	_teamProfileORM.TeamName = field.NewString(tableName, "team_name")
	_teamProfileORM.Admin = teamProfileORMHasOneAdmin{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Admin", "social_servicev2.UserProfileORM"),
		Bookmarks: struct {
			field.RelationField
			Publications struct {
				field.RelationField
				Admin struct {
					field.RelationField
				}
				Editors struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Admin.Bookmarks", "social_servicev2.BookmarkORM"),
			Publications: struct {
				field.RelationField
				Admin struct {
					field.RelationField
				}
				Editors struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Admin.Bookmarks.Publications", "social_servicev2.PublicationORM"),
				Admin: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Admin.Bookmarks.Publications.Admin", "social_servicev2.UserProfileORM"),
				},
				Editors: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Admin.Bookmarks.Publications.Editors", "social_servicev2.UserProfileORM"),
				},
			},
		},
		Tags: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Admin.Tags", "social_servicev2.UserTagsORM"),
		},
	}

	_teamProfileORM.AuditLogs = teamProfileORMHasManyAuditLogs{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("AuditLogs", "social_servicev2.AuditLogORM"),
	}

	_teamProfileORM.Members = teamProfileORMHasManyMembers{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Members", "social_servicev2.UserProfileORM"),
	}

	_teamProfileORM.Publications = teamProfileORMHasManyPublications{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Publications", "social_servicev2.PublicationORM"),
	}

	_teamProfileORM.Roles = teamProfileORMHasManyRoles{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Roles", "social_servicev2.RoleORM"),
		Member: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Roles.Member", "social_servicev2.UserProfileORM"),
		},
	}

	_teamProfileORM.fillFieldMap()

	return _teamProfileORM
}

type teamProfileORM struct {
	teamProfileORMDo

	ALL         field.Asterisk
	CreatedAt   field.String
	Description field.String
	FocusAreas  field.Field
	Id          field.Uint64
	Tags        field.Field
	TeamName    field.String
	Admin       teamProfileORMHasOneAdmin

	AuditLogs teamProfileORMHasManyAuditLogs

	Members teamProfileORMHasManyMembers

	Publications teamProfileORMHasManyPublications

	Roles teamProfileORMHasManyRoles

	fieldMap map[string]field.Expr
}

func (t teamProfileORM) Table(newTableName string) *teamProfileORM {
	t.teamProfileORMDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t teamProfileORM) As(alias string) *teamProfileORM {
	t.teamProfileORMDo.DO = *(t.teamProfileORMDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *teamProfileORM) updateTableName(table string) *teamProfileORM {
	t.ALL = field.NewAsterisk(table)
	t.CreatedAt = field.NewString(table, "created_at")
	t.Description = field.NewString(table, "description")
	t.FocusAreas = field.NewField(table, "focus_areas")
	t.Id = field.NewUint64(table, "id")
	t.Tags = field.NewField(table, "tags")
	t.TeamName = field.NewString(table, "team_name")

	t.fillFieldMap()

	return t
}

func (t *teamProfileORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *teamProfileORM) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["description"] = t.Description
	t.fieldMap["focus_areas"] = t.FocusAreas
	t.fieldMap["id"] = t.Id
	t.fieldMap["tags"] = t.Tags
	t.fieldMap["team_name"] = t.TeamName

}

func (t teamProfileORM) clone(db *gorm.DB) teamProfileORM {
	t.teamProfileORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t teamProfileORM) replaceDB(db *gorm.DB) teamProfileORM {
	t.teamProfileORMDo.ReplaceDB(db)
	return t
}

type teamProfileORMHasOneAdmin struct {
	db *gorm.DB

	field.RelationField

	Bookmarks struct {
		field.RelationField
		Publications struct {
			field.RelationField
			Admin struct {
				field.RelationField
			}
			Editors struct {
				field.RelationField
			}
		}
	}
	Tags struct {
		field.RelationField
	}
}

func (a teamProfileORMHasOneAdmin) Where(conds ...field.Expr) *teamProfileORMHasOneAdmin {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a teamProfileORMHasOneAdmin) WithContext(ctx context.Context) *teamProfileORMHasOneAdmin {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a teamProfileORMHasOneAdmin) Session(session *gorm.Session) *teamProfileORMHasOneAdmin {
	a.db = a.db.Session(session)
	return &a
}

func (a teamProfileORMHasOneAdmin) Model(m *social_servicev2.TeamProfileORM) *teamProfileORMHasOneAdminTx {
	return &teamProfileORMHasOneAdminTx{a.db.Model(m).Association(a.Name())}
}

type teamProfileORMHasOneAdminTx struct{ tx *gorm.Association }

func (a teamProfileORMHasOneAdminTx) Find() (result *social_servicev2.UserProfileORM, err error) {
	return result, a.tx.Find(&result)
}

func (a teamProfileORMHasOneAdminTx) Append(values ...*social_servicev2.UserProfileORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a teamProfileORMHasOneAdminTx) Replace(values ...*social_servicev2.UserProfileORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a teamProfileORMHasOneAdminTx) Delete(values ...*social_servicev2.UserProfileORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a teamProfileORMHasOneAdminTx) Clear() error {
	return a.tx.Clear()
}

func (a teamProfileORMHasOneAdminTx) Count() int64 {
	return a.tx.Count()
}

type teamProfileORMHasManyAuditLogs struct {
	db *gorm.DB

	field.RelationField
}

func (a teamProfileORMHasManyAuditLogs) Where(conds ...field.Expr) *teamProfileORMHasManyAuditLogs {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a teamProfileORMHasManyAuditLogs) WithContext(ctx context.Context) *teamProfileORMHasManyAuditLogs {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a teamProfileORMHasManyAuditLogs) Session(session *gorm.Session) *teamProfileORMHasManyAuditLogs {
	a.db = a.db.Session(session)
	return &a
}

func (a teamProfileORMHasManyAuditLogs) Model(m *social_servicev2.TeamProfileORM) *teamProfileORMHasManyAuditLogsTx {
	return &teamProfileORMHasManyAuditLogsTx{a.db.Model(m).Association(a.Name())}
}

type teamProfileORMHasManyAuditLogsTx struct{ tx *gorm.Association }

func (a teamProfileORMHasManyAuditLogsTx) Find() (result []*social_servicev2.AuditLogORM, err error) {
	return result, a.tx.Find(&result)
}

func (a teamProfileORMHasManyAuditLogsTx) Append(values ...*social_servicev2.AuditLogORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a teamProfileORMHasManyAuditLogsTx) Replace(values ...*social_servicev2.AuditLogORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a teamProfileORMHasManyAuditLogsTx) Delete(values ...*social_servicev2.AuditLogORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a teamProfileORMHasManyAuditLogsTx) Clear() error {
	return a.tx.Clear()
}

func (a teamProfileORMHasManyAuditLogsTx) Count() int64 {
	return a.tx.Count()
}

type teamProfileORMHasManyMembers struct {
	db *gorm.DB

	field.RelationField
}

func (a teamProfileORMHasManyMembers) Where(conds ...field.Expr) *teamProfileORMHasManyMembers {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a teamProfileORMHasManyMembers) WithContext(ctx context.Context) *teamProfileORMHasManyMembers {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a teamProfileORMHasManyMembers) Session(session *gorm.Session) *teamProfileORMHasManyMembers {
	a.db = a.db.Session(session)
	return &a
}

func (a teamProfileORMHasManyMembers) Model(m *social_servicev2.TeamProfileORM) *teamProfileORMHasManyMembersTx {
	return &teamProfileORMHasManyMembersTx{a.db.Model(m).Association(a.Name())}
}

type teamProfileORMHasManyMembersTx struct{ tx *gorm.Association }

func (a teamProfileORMHasManyMembersTx) Find() (result []*social_servicev2.UserProfileORM, err error) {
	return result, a.tx.Find(&result)
}

func (a teamProfileORMHasManyMembersTx) Append(values ...*social_servicev2.UserProfileORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a teamProfileORMHasManyMembersTx) Replace(values ...*social_servicev2.UserProfileORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a teamProfileORMHasManyMembersTx) Delete(values ...*social_servicev2.UserProfileORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a teamProfileORMHasManyMembersTx) Clear() error {
	return a.tx.Clear()
}

func (a teamProfileORMHasManyMembersTx) Count() int64 {
	return a.tx.Count()
}

type teamProfileORMHasManyPublications struct {
	db *gorm.DB

	field.RelationField
}

func (a teamProfileORMHasManyPublications) Where(conds ...field.Expr) *teamProfileORMHasManyPublications {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a teamProfileORMHasManyPublications) WithContext(ctx context.Context) *teamProfileORMHasManyPublications {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a teamProfileORMHasManyPublications) Session(session *gorm.Session) *teamProfileORMHasManyPublications {
	a.db = a.db.Session(session)
	return &a
}

func (a teamProfileORMHasManyPublications) Model(m *social_servicev2.TeamProfileORM) *teamProfileORMHasManyPublicationsTx {
	return &teamProfileORMHasManyPublicationsTx{a.db.Model(m).Association(a.Name())}
}

type teamProfileORMHasManyPublicationsTx struct{ tx *gorm.Association }

func (a teamProfileORMHasManyPublicationsTx) Find() (result []*social_servicev2.PublicationORM, err error) {
	return result, a.tx.Find(&result)
}

func (a teamProfileORMHasManyPublicationsTx) Append(values ...*social_servicev2.PublicationORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a teamProfileORMHasManyPublicationsTx) Replace(values ...*social_servicev2.PublicationORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a teamProfileORMHasManyPublicationsTx) Delete(values ...*social_servicev2.PublicationORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a teamProfileORMHasManyPublicationsTx) Clear() error {
	return a.tx.Clear()
}

func (a teamProfileORMHasManyPublicationsTx) Count() int64 {
	return a.tx.Count()
}

type teamProfileORMHasManyRoles struct {
	db *gorm.DB

	field.RelationField

	Member struct {
		field.RelationField
	}
}

func (a teamProfileORMHasManyRoles) Where(conds ...field.Expr) *teamProfileORMHasManyRoles {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a teamProfileORMHasManyRoles) WithContext(ctx context.Context) *teamProfileORMHasManyRoles {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a teamProfileORMHasManyRoles) Session(session *gorm.Session) *teamProfileORMHasManyRoles {
	a.db = a.db.Session(session)
	return &a
}

func (a teamProfileORMHasManyRoles) Model(m *social_servicev2.TeamProfileORM) *teamProfileORMHasManyRolesTx {
	return &teamProfileORMHasManyRolesTx{a.db.Model(m).Association(a.Name())}
}

type teamProfileORMHasManyRolesTx struct{ tx *gorm.Association }

func (a teamProfileORMHasManyRolesTx) Find() (result []*social_servicev2.RoleORM, err error) {
	return result, a.tx.Find(&result)
}

func (a teamProfileORMHasManyRolesTx) Append(values ...*social_servicev2.RoleORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a teamProfileORMHasManyRolesTx) Replace(values ...*social_servicev2.RoleORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a teamProfileORMHasManyRolesTx) Delete(values ...*social_servicev2.RoleORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a teamProfileORMHasManyRolesTx) Clear() error {
	return a.tx.Clear()
}

func (a teamProfileORMHasManyRolesTx) Count() int64 {
	return a.tx.Count()
}

type teamProfileORMDo struct{ gen.DO }

type ITeamProfileORMDo interface {
	gen.SubQuery
	Debug() ITeamProfileORMDo
	WithContext(ctx context.Context) ITeamProfileORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITeamProfileORMDo
	WriteDB() ITeamProfileORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITeamProfileORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITeamProfileORMDo
	Not(conds ...gen.Condition) ITeamProfileORMDo
	Or(conds ...gen.Condition) ITeamProfileORMDo
	Select(conds ...field.Expr) ITeamProfileORMDo
	Where(conds ...gen.Condition) ITeamProfileORMDo
	Order(conds ...field.Expr) ITeamProfileORMDo
	Distinct(cols ...field.Expr) ITeamProfileORMDo
	Omit(cols ...field.Expr) ITeamProfileORMDo
	Join(table schema.Tabler, on ...field.Expr) ITeamProfileORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITeamProfileORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITeamProfileORMDo
	Group(cols ...field.Expr) ITeamProfileORMDo
	Having(conds ...gen.Condition) ITeamProfileORMDo
	Limit(limit int) ITeamProfileORMDo
	Offset(offset int) ITeamProfileORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITeamProfileORMDo
	Unscoped() ITeamProfileORMDo
	Create(values ...*social_servicev2.TeamProfileORM) error
	CreateInBatches(values []*social_servicev2.TeamProfileORM, batchSize int) error
	Save(values ...*social_servicev2.TeamProfileORM) error
	First() (*social_servicev2.TeamProfileORM, error)
	Take() (*social_servicev2.TeamProfileORM, error)
	Last() (*social_servicev2.TeamProfileORM, error)
	Find() ([]*social_servicev2.TeamProfileORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*social_servicev2.TeamProfileORM, err error)
	FindInBatches(result *[]*social_servicev2.TeamProfileORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*social_servicev2.TeamProfileORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITeamProfileORMDo
	Assign(attrs ...field.AssignExpr) ITeamProfileORMDo
	Joins(fields ...field.RelationField) ITeamProfileORMDo
	Preload(fields ...field.RelationField) ITeamProfileORMDo
	FirstOrInit() (*social_servicev2.TeamProfileORM, error)
	FirstOrCreate() (*social_servicev2.TeamProfileORM, error)
	FindByPage(offset int, limit int) (result []*social_servicev2.TeamProfileORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITeamProfileORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result social_servicev2.TeamProfileORM, err error)
	GetRecordByIDs(ids []int) (result []social_servicev2.TeamProfileORM, err error)
	CreateRecord(item social_servicev2.TeamProfileORM) (err error)
	UpdateRecordByID(id int, item social_servicev2.TeamProfileORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []social_servicev2.TeamProfileORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result social_servicev2.TeamProfileORM, err error)
	GetByIDs(ids []uint64) (result []social_servicev2.TeamProfileORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t teamProfileORMDo) GetRecordByID(id int) (result social_servicev2.TeamProfileORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM team_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (t teamProfileORMDo) GetRecordByIDs(ids []int) (result []social_servicev2.TeamProfileORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM team_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (t teamProfileORMDo) CreateRecord(item social_servicev2.TeamProfileORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO team_profiles (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (t teamProfileORMDo) UpdateRecordByID(id int, item social_servicev2.TeamProfileORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE team_profiles SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t teamProfileORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM team_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (t teamProfileORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []social_servicev2.TeamProfileORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM team_profiles ORDER BY " + t.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (t teamProfileORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM team_profiles ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (t teamProfileORMDo) GetByID(id uint64) (result social_servicev2.TeamProfileORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM team_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (t teamProfileORMDo) GetByIDs(ids []uint64) (result []social_servicev2.TeamProfileORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM team_profiles ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (t teamProfileORMDo) Debug() ITeamProfileORMDo {
	return t.withDO(t.DO.Debug())
}

func (t teamProfileORMDo) WithContext(ctx context.Context) ITeamProfileORMDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t teamProfileORMDo) ReadDB() ITeamProfileORMDo {
	return t.Clauses(dbresolver.Read)
}

func (t teamProfileORMDo) WriteDB() ITeamProfileORMDo {
	return t.Clauses(dbresolver.Write)
}

func (t teamProfileORMDo) Session(config *gorm.Session) ITeamProfileORMDo {
	return t.withDO(t.DO.Session(config))
}

func (t teamProfileORMDo) Clauses(conds ...clause.Expression) ITeamProfileORMDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t teamProfileORMDo) Returning(value interface{}, columns ...string) ITeamProfileORMDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t teamProfileORMDo) Not(conds ...gen.Condition) ITeamProfileORMDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t teamProfileORMDo) Or(conds ...gen.Condition) ITeamProfileORMDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t teamProfileORMDo) Select(conds ...field.Expr) ITeamProfileORMDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t teamProfileORMDo) Where(conds ...gen.Condition) ITeamProfileORMDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t teamProfileORMDo) Order(conds ...field.Expr) ITeamProfileORMDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t teamProfileORMDo) Distinct(cols ...field.Expr) ITeamProfileORMDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t teamProfileORMDo) Omit(cols ...field.Expr) ITeamProfileORMDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t teamProfileORMDo) Join(table schema.Tabler, on ...field.Expr) ITeamProfileORMDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t teamProfileORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITeamProfileORMDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t teamProfileORMDo) RightJoin(table schema.Tabler, on ...field.Expr) ITeamProfileORMDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t teamProfileORMDo) Group(cols ...field.Expr) ITeamProfileORMDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t teamProfileORMDo) Having(conds ...gen.Condition) ITeamProfileORMDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t teamProfileORMDo) Limit(limit int) ITeamProfileORMDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t teamProfileORMDo) Offset(offset int) ITeamProfileORMDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t teamProfileORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITeamProfileORMDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t teamProfileORMDo) Unscoped() ITeamProfileORMDo {
	return t.withDO(t.DO.Unscoped())
}

func (t teamProfileORMDo) Create(values ...*social_servicev2.TeamProfileORM) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t teamProfileORMDo) CreateInBatches(values []*social_servicev2.TeamProfileORM, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t teamProfileORMDo) Save(values ...*social_servicev2.TeamProfileORM) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t teamProfileORMDo) First() (*social_servicev2.TeamProfileORM, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.TeamProfileORM), nil
	}
}

func (t teamProfileORMDo) Take() (*social_servicev2.TeamProfileORM, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.TeamProfileORM), nil
	}
}

func (t teamProfileORMDo) Last() (*social_servicev2.TeamProfileORM, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.TeamProfileORM), nil
	}
}

func (t teamProfileORMDo) Find() ([]*social_servicev2.TeamProfileORM, error) {
	result, err := t.DO.Find()
	return result.([]*social_servicev2.TeamProfileORM), err
}

func (t teamProfileORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*social_servicev2.TeamProfileORM, err error) {
	buf := make([]*social_servicev2.TeamProfileORM, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t teamProfileORMDo) FindInBatches(result *[]*social_servicev2.TeamProfileORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t teamProfileORMDo) Attrs(attrs ...field.AssignExpr) ITeamProfileORMDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t teamProfileORMDo) Assign(attrs ...field.AssignExpr) ITeamProfileORMDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t teamProfileORMDo) Joins(fields ...field.RelationField) ITeamProfileORMDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t teamProfileORMDo) Preload(fields ...field.RelationField) ITeamProfileORMDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t teamProfileORMDo) FirstOrInit() (*social_servicev2.TeamProfileORM, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.TeamProfileORM), nil
	}
}

func (t teamProfileORMDo) FirstOrCreate() (*social_servicev2.TeamProfileORM, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.TeamProfileORM), nil
	}
}

func (t teamProfileORMDo) FindByPage(offset int, limit int) (result []*social_servicev2.TeamProfileORM, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t teamProfileORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t teamProfileORMDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t teamProfileORMDo) Delete(models ...*social_servicev2.TeamProfileORM) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *teamProfileORMDo) withDO(do gen.Dao) *teamProfileORMDo {
	t.DO = *do.(*gen.DO)
	return t
}
