// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	social_servicev2 "github.com/PlaybookMediaEngineering/core/core-library/pkg/generated/social_service/v2"
)

func newRoleORM(db *gorm.DB, opts ...gen.DOOption) roleORM {
	_roleORM := roleORM{}

	_roleORM.roleORMDo.UseDB(db, opts...)
	_roleORM.roleORMDo.UseModel(&social_servicev2.RoleORM{})

	tableName := _roleORM.roleORMDo.TableName()
	_roleORM.ALL = field.NewAsterisk(tableName)
	_roleORM.CreatedAt = field.NewString(tableName, "created_at")
	_roleORM.Description = field.NewString(tableName, "description")
	_roleORM.Id = field.NewUint64(tableName, "id")
	_roleORM.Name = field.NewString(tableName, "name")
	_roleORM.TeamProfileId = field.NewUint64(tableName, "team_profile_id")
	_roleORM.UpdatedAt = field.NewString(tableName, "updated_at")
	_roleORM.Member = roleORMHasOneMember{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Member", "social_servicev2.UserProfileORM"),
		Bookmarks: struct {
			field.RelationField
			Publications struct {
				field.RelationField
				Admin struct {
					field.RelationField
				}
				Editors struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Member.Bookmarks", "social_servicev2.BookmarkORM"),
			Publications: struct {
				field.RelationField
				Admin struct {
					field.RelationField
				}
				Editors struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Member.Bookmarks.Publications", "social_servicev2.PublicationORM"),
				Admin: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Member.Bookmarks.Publications.Admin", "social_servicev2.UserProfileORM"),
				},
				Editors: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Member.Bookmarks.Publications.Editors", "social_servicev2.UserProfileORM"),
				},
			},
		},
		Tags: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Member.Tags", "social_servicev2.UserTagsORM"),
		},
	}

	_roleORM.fillFieldMap()

	return _roleORM
}

type roleORM struct {
	roleORMDo

	ALL           field.Asterisk
	CreatedAt     field.String
	Description   field.String
	Id            field.Uint64
	Name          field.String
	TeamProfileId field.Uint64
	UpdatedAt     field.String
	Member        roleORMHasOneMember

	fieldMap map[string]field.Expr
}

func (r roleORM) Table(newTableName string) *roleORM {
	r.roleORMDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r roleORM) As(alias string) *roleORM {
	r.roleORMDo.DO = *(r.roleORMDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *roleORM) updateTableName(table string) *roleORM {
	r.ALL = field.NewAsterisk(table)
	r.CreatedAt = field.NewString(table, "created_at")
	r.Description = field.NewString(table, "description")
	r.Id = field.NewUint64(table, "id")
	r.Name = field.NewString(table, "name")
	r.TeamProfileId = field.NewUint64(table, "team_profile_id")
	r.UpdatedAt = field.NewString(table, "updated_at")

	r.fillFieldMap()

	return r
}

func (r *roleORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *roleORM) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 7)
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["description"] = r.Description
	r.fieldMap["id"] = r.Id
	r.fieldMap["name"] = r.Name
	r.fieldMap["team_profile_id"] = r.TeamProfileId
	r.fieldMap["updated_at"] = r.UpdatedAt

}

func (r roleORM) clone(db *gorm.DB) roleORM {
	r.roleORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r roleORM) replaceDB(db *gorm.DB) roleORM {
	r.roleORMDo.ReplaceDB(db)
	return r
}

type roleORMHasOneMember struct {
	db *gorm.DB

	field.RelationField

	Bookmarks struct {
		field.RelationField
		Publications struct {
			field.RelationField
			Admin struct {
				field.RelationField
			}
			Editors struct {
				field.RelationField
			}
		}
	}
	Tags struct {
		field.RelationField
	}
}

func (a roleORMHasOneMember) Where(conds ...field.Expr) *roleORMHasOneMember {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a roleORMHasOneMember) WithContext(ctx context.Context) *roleORMHasOneMember {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a roleORMHasOneMember) Session(session *gorm.Session) *roleORMHasOneMember {
	a.db = a.db.Session(session)
	return &a
}

func (a roleORMHasOneMember) Model(m *social_servicev2.RoleORM) *roleORMHasOneMemberTx {
	return &roleORMHasOneMemberTx{a.db.Model(m).Association(a.Name())}
}

type roleORMHasOneMemberTx struct{ tx *gorm.Association }

func (a roleORMHasOneMemberTx) Find() (result *social_servicev2.UserProfileORM, err error) {
	return result, a.tx.Find(&result)
}

func (a roleORMHasOneMemberTx) Append(values ...*social_servicev2.UserProfileORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a roleORMHasOneMemberTx) Replace(values ...*social_servicev2.UserProfileORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a roleORMHasOneMemberTx) Delete(values ...*social_servicev2.UserProfileORM) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a roleORMHasOneMemberTx) Clear() error {
	return a.tx.Clear()
}

func (a roleORMHasOneMemberTx) Count() int64 {
	return a.tx.Count()
}

type roleORMDo struct{ gen.DO }

type IRoleORMDo interface {
	gen.SubQuery
	Debug() IRoleORMDo
	WithContext(ctx context.Context) IRoleORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRoleORMDo
	WriteDB() IRoleORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRoleORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRoleORMDo
	Not(conds ...gen.Condition) IRoleORMDo
	Or(conds ...gen.Condition) IRoleORMDo
	Select(conds ...field.Expr) IRoleORMDo
	Where(conds ...gen.Condition) IRoleORMDo
	Order(conds ...field.Expr) IRoleORMDo
	Distinct(cols ...field.Expr) IRoleORMDo
	Omit(cols ...field.Expr) IRoleORMDo
	Join(table schema.Tabler, on ...field.Expr) IRoleORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRoleORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRoleORMDo
	Group(cols ...field.Expr) IRoleORMDo
	Having(conds ...gen.Condition) IRoleORMDo
	Limit(limit int) IRoleORMDo
	Offset(offset int) IRoleORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRoleORMDo
	Unscoped() IRoleORMDo
	Create(values ...*social_servicev2.RoleORM) error
	CreateInBatches(values []*social_servicev2.RoleORM, batchSize int) error
	Save(values ...*social_servicev2.RoleORM) error
	First() (*social_servicev2.RoleORM, error)
	Take() (*social_servicev2.RoleORM, error)
	Last() (*social_servicev2.RoleORM, error)
	Find() ([]*social_servicev2.RoleORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*social_servicev2.RoleORM, err error)
	FindInBatches(result *[]*social_servicev2.RoleORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*social_servicev2.RoleORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRoleORMDo
	Assign(attrs ...field.AssignExpr) IRoleORMDo
	Joins(fields ...field.RelationField) IRoleORMDo
	Preload(fields ...field.RelationField) IRoleORMDo
	FirstOrInit() (*social_servicev2.RoleORM, error)
	FirstOrCreate() (*social_servicev2.RoleORM, error)
	FindByPage(offset int, limit int) (result []*social_servicev2.RoleORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRoleORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result social_servicev2.RoleORM, err error)
	GetRecordByIDs(ids []int) (result []social_servicev2.RoleORM, err error)
	CreateRecord(item social_servicev2.RoleORM) (err error)
	UpdateRecordByID(id int, item social_servicev2.RoleORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []social_servicev2.RoleORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result social_servicev2.RoleORM, err error)
	GetByIDs(ids []uint64) (result []social_servicev2.RoleORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (r roleORMDo) GetRecordByID(id int) (result social_servicev2.RoleORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM roles ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (r roleORMDo) GetRecordByIDs(ids []int) (result []social_servicev2.RoleORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM roles ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (r roleORMDo) CreateRecord(item social_servicev2.RoleORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO roles (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (r roleORMDo) UpdateRecordByID(id int, item social_servicev2.RoleORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE roles SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (r roleORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM roles ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (r roleORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []social_servicev2.RoleORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM roles ORDER BY " + r.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (r roleORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM roles ")

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (r roleORMDo) GetByID(id uint64) (result social_servicev2.RoleORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM roles ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (r roleORMDo) GetByIDs(ids []uint64) (result []social_servicev2.RoleORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM roles ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = r.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (r roleORMDo) Debug() IRoleORMDo {
	return r.withDO(r.DO.Debug())
}

func (r roleORMDo) WithContext(ctx context.Context) IRoleORMDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r roleORMDo) ReadDB() IRoleORMDo {
	return r.Clauses(dbresolver.Read)
}

func (r roleORMDo) WriteDB() IRoleORMDo {
	return r.Clauses(dbresolver.Write)
}

func (r roleORMDo) Session(config *gorm.Session) IRoleORMDo {
	return r.withDO(r.DO.Session(config))
}

func (r roleORMDo) Clauses(conds ...clause.Expression) IRoleORMDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r roleORMDo) Returning(value interface{}, columns ...string) IRoleORMDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r roleORMDo) Not(conds ...gen.Condition) IRoleORMDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r roleORMDo) Or(conds ...gen.Condition) IRoleORMDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r roleORMDo) Select(conds ...field.Expr) IRoleORMDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r roleORMDo) Where(conds ...gen.Condition) IRoleORMDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r roleORMDo) Order(conds ...field.Expr) IRoleORMDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r roleORMDo) Distinct(cols ...field.Expr) IRoleORMDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r roleORMDo) Omit(cols ...field.Expr) IRoleORMDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r roleORMDo) Join(table schema.Tabler, on ...field.Expr) IRoleORMDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r roleORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRoleORMDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r roleORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IRoleORMDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r roleORMDo) Group(cols ...field.Expr) IRoleORMDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r roleORMDo) Having(conds ...gen.Condition) IRoleORMDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r roleORMDo) Limit(limit int) IRoleORMDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r roleORMDo) Offset(offset int) IRoleORMDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r roleORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRoleORMDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r roleORMDo) Unscoped() IRoleORMDo {
	return r.withDO(r.DO.Unscoped())
}

func (r roleORMDo) Create(values ...*social_servicev2.RoleORM) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r roleORMDo) CreateInBatches(values []*social_servicev2.RoleORM, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r roleORMDo) Save(values ...*social_servicev2.RoleORM) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r roleORMDo) First() (*social_servicev2.RoleORM, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.RoleORM), nil
	}
}

func (r roleORMDo) Take() (*social_servicev2.RoleORM, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.RoleORM), nil
	}
}

func (r roleORMDo) Last() (*social_servicev2.RoleORM, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.RoleORM), nil
	}
}

func (r roleORMDo) Find() ([]*social_servicev2.RoleORM, error) {
	result, err := r.DO.Find()
	return result.([]*social_servicev2.RoleORM), err
}

func (r roleORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*social_servicev2.RoleORM, err error) {
	buf := make([]*social_servicev2.RoleORM, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r roleORMDo) FindInBatches(result *[]*social_servicev2.RoleORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r roleORMDo) Attrs(attrs ...field.AssignExpr) IRoleORMDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r roleORMDo) Assign(attrs ...field.AssignExpr) IRoleORMDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r roleORMDo) Joins(fields ...field.RelationField) IRoleORMDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r roleORMDo) Preload(fields ...field.RelationField) IRoleORMDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r roleORMDo) FirstOrInit() (*social_servicev2.RoleORM, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.RoleORM), nil
	}
}

func (r roleORMDo) FirstOrCreate() (*social_servicev2.RoleORM, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*social_servicev2.RoleORM), nil
	}
}

func (r roleORMDo) FindByPage(offset int, limit int) (result []*social_servicev2.RoleORM, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r roleORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r roleORMDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r roleORMDo) Delete(models ...*social_servicev2.RoleORM) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *roleORMDo) withDO(do gen.Dao) *roleORMDo {
	r.DO = *do.(*gen.DO)
	return r
}
